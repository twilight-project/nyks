syntax = "proto3";
package twilightproject.nyks.bridge;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "bridge/tx.proto";
import "bridge/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/twilight-project/nyks/x/bridge/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/twilight-project/nyks/bridge/params";
  }
  // Queries a list of RegisteredBtcDepositAddresses items.
	rpc RegisteredBtcDepositAddresses(QueryRegisteredBtcDepositAddressesRequest) returns (QueryRegisteredBtcDepositAddressesResponse) {
		option (google.api.http).get = "/twilight-project/nyks/bridge/registered_btc_deposit_addresses";
	}

// Queries a list of RegisteredReserveScripts items.
	rpc RegisteredReserveScripts(QueryRegisteredReserveScriptsRequest) returns (QueryRegisteredReserveScriptsResponse) {
		option (google.api.http).get = "/twilight-project/nyks/bridge/registered_reserve_scripts";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryRegisteredBtcDepositAddressesRequest {
}

message QueryRegisteredBtcDepositAddressesResponse {
  repeated MsgRegisterBtcDepositAddress addresses = 1 [(gogoproto.nullable) = false];
}

message QueryRegisteredReserveScriptsRequest {
}

message QueryRegisteredReserveScriptsResponse {
  repeated MsgRegisterReserveAddress scripts = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
