// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/volt/clearing.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IndividualTwilightReserveAccountBalance struct {
	ReserveId uint64 `protobuf:"varint,1,opt,name=ReserveId,proto3" json:"ReserveId,omitempty"`
	Amount    string `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *IndividualTwilightReserveAccountBalance) Reset() {
	*m = IndividualTwilightReserveAccountBalance{}
}
func (m *IndividualTwilightReserveAccountBalance) String() string { return proto.CompactTextString(m) }
func (*IndividualTwilightReserveAccountBalance) ProtoMessage()    {}
func (*IndividualTwilightReserveAccountBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c47080687c58e5f, []int{0}
}
func (m *IndividualTwilightReserveAccountBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndividualTwilightReserveAccountBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndividualTwilightReserveAccountBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndividualTwilightReserveAccountBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualTwilightReserveAccountBalance.Merge(m, src)
}
func (m *IndividualTwilightReserveAccountBalance) XXX_Size() int {
	return m.Size()
}
func (m *IndividualTwilightReserveAccountBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualTwilightReserveAccountBalance.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualTwilightReserveAccountBalance proto.InternalMessageInfo

func (m *IndividualTwilightReserveAccountBalance) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *IndividualTwilightReserveAccountBalance) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// ClearingAccount is used to keep a mapping of how a user's addresses and its reserve account balances
type ClearingAccount struct {
	TwilightAddress        string                                     `protobuf:"bytes,1,opt,name=TwilightAddress,proto3" json:"TwilightAddress,omitempty"`
	BtcDepositAddress      string                                     `protobuf:"bytes,2,opt,name=BtcDepositAddress,proto3" json:"BtcDepositAddress,omitempty"`
	BtcWithdrawAddress     string                                     `protobuf:"bytes,3,opt,name=BtcWithdrawAddress,proto3" json:"BtcWithdrawAddress,omitempty"`
	QQDepositAddress       string                                     `protobuf:"bytes,4,opt,name=QQDepositAddress,proto3" json:"QQDepositAddress,omitempty"`
	QQWithdrawAddress      string                                     `protobuf:"bytes,5,opt,name=QQWithdrawAddress,proto3" json:"QQWithdrawAddress,omitempty"`
	ReserveAccountBalances []*IndividualTwilightReserveAccountBalance `protobuf:"bytes,6,rep,name=ReserveAccountBalances,proto3" json:"ReserveAccountBalances,omitempty"`
}

func (m *ClearingAccount) Reset()         { *m = ClearingAccount{} }
func (m *ClearingAccount) String() string { return proto.CompactTextString(m) }
func (*ClearingAccount) ProtoMessage()    {}
func (*ClearingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c47080687c58e5f, []int{1}
}
func (m *ClearingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearingAccount.Merge(m, src)
}
func (m *ClearingAccount) XXX_Size() int {
	return m.Size()
}
func (m *ClearingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ClearingAccount proto.InternalMessageInfo

func (m *ClearingAccount) GetTwilightAddress() string {
	if m != nil {
		return m.TwilightAddress
	}
	return ""
}

func (m *ClearingAccount) GetBtcDepositAddress() string {
	if m != nil {
		return m.BtcDepositAddress
	}
	return ""
}

func (m *ClearingAccount) GetBtcWithdrawAddress() string {
	if m != nil {
		return m.BtcWithdrawAddress
	}
	return ""
}

func (m *ClearingAccount) GetQQDepositAddress() string {
	if m != nil {
		return m.QQDepositAddress
	}
	return ""
}

func (m *ClearingAccount) GetQQWithdrawAddress() string {
	if m != nil {
		return m.QQWithdrawAddress
	}
	return ""
}

func (m *ClearingAccount) GetReserveAccountBalances() []*IndividualTwilightReserveAccountBalance {
	if m != nil {
		return m.ReserveAccountBalances
	}
	return nil
}

func init() {
	proto.RegisterType((*IndividualTwilightReserveAccountBalance)(nil), "twilightproject.nyks.volt.IndividualTwilightReserveAccountBalance")
	proto.RegisterType((*ClearingAccount)(nil), "twilightproject.nyks.volt.ClearingAccount")
}

func init() { proto.RegisterFile("nyks/volt/clearing.proto", fileDescriptor_1c47080687c58e5f) }

var fileDescriptor_1c47080687c58e5f = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0x97, 0x6d, 0xff, 0xc1, 0xf2, 0x3f, 0x4c, 0x73, 0x18, 0x15, 0x24, 0x8c, 0x5d, 0x2c,
	0xe2, 0x52, 0xd0, 0x4f, 0xb0, 0x2a, 0xc8, 0x8e, 0x2d, 0x82, 0xe0, 0x45, 0xba, 0x24, 0x6c, 0xd1,
	0xae, 0x29, 0x49, 0xb6, 0x39, 0x3f, 0x85, 0x1f, 0xcb, 0xe3, 0x8e, 0x1e, 0x65, 0xfb, 0x00, 0x7e,
	0x05, 0x69, 0x97, 0x2a, 0xb4, 0x1b, 0x78, 0xcc, 0xfb, 0xfc, 0x78, 0x9e, 0x87, 0xbc, 0x2f, 0x74,
	0x92, 0xd5, 0xb3, 0xf6, 0x16, 0x32, 0x36, 0x1e, 0x8d, 0x79, 0xa4, 0x44, 0x32, 0x21, 0xa9, 0x92,
	0x46, 0xa2, 0x13, 0xb3, 0x14, 0xb1, 0x98, 0x4c, 0x4d, 0xaa, 0xe4, 0x13, 0xa7, 0x86, 0x64, 0x24,
	0xc9, 0xc8, 0xfe, 0x23, 0x3c, 0x1b, 0x25, 0x4c, 0x2c, 0x04, 0x9b, 0x47, 0xf1, 0x9d, 0xc5, 0x42,
	0xae, 0xb9, 0x5a, 0xf0, 0x21, 0xa5, 0x72, 0x9e, 0x18, 0x3f, 0x8a, 0xa3, 0x84, 0x72, 0x74, 0x0a,
	0xdb, 0x56, 0x18, 0x31, 0x07, 0xf4, 0x80, 0xdb, 0x0c, 0x7f, 0x07, 0xa8, 0x0b, 0x5b, 0xc3, 0x59,
	0x86, 0x3b, 0xf5, 0x1e, 0x70, 0xdb, 0xa1, 0x7d, 0xf5, 0xbf, 0xea, 0xb0, 0x73, 0x6d, 0xeb, 0x58,
	0x43, 0xe4, 0xc2, 0x4e, 0x11, 0x35, 0x64, 0x4c, 0x71, 0xad, 0x73, 0xbf, 0x76, 0x58, 0x1e, 0xa3,
	0x0b, 0x78, 0xec, 0x1b, 0x7a, 0xc3, 0x53, 0xa9, 0xc5, 0x0f, 0xbb, 0x0b, 0xa8, 0x0a, 0x88, 0x40,
	0xe4, 0x1b, 0x7a, 0x2f, 0xcc, 0x94, 0xa9, 0x68, 0x59, 0xe0, 0x8d, 0x1c, 0xdf, 0xa3, 0xa0, 0x73,
	0x78, 0x14, 0x04, 0x25, 0xf3, 0x66, 0x4e, 0x57, 0xe6, 0x59, 0x93, 0x20, 0x28, 0x5b, 0xff, 0xdb,
	0x35, 0xa9, 0x08, 0xe8, 0x15, 0x76, 0xf7, 0x7e, 0xa2, 0x76, 0x5a, 0xbd, 0x86, 0xfb, 0xff, 0xd2,
	0x27, 0x07, 0x57, 0x42, 0xfe, 0xb8, 0x8f, 0xf0, 0x40, 0x82, 0x7f, 0xfb, 0xbe, 0xc1, 0x60, 0xbd,
	0xc1, 0xe0, 0x73, 0x83, 0xc1, 0xdb, 0x16, 0xd7, 0xd6, 0x5b, 0x5c, 0xfb, 0xd8, 0xe2, 0xda, 0xc3,
	0x60, 0x22, 0xcc, 0x74, 0x3e, 0x26, 0x54, 0xce, 0xbc, 0x22, 0x7f, 0x60, 0x0b, 0x78, 0xf9, 0xf5,
	0xbc, 0xec, 0xee, 0xc7, 0xac, 0x52, 0xae, 0xc7, 0xad, 0xfc, 0x7a, 0xae, 0xbe, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x1c, 0xd2, 0x85, 0x5d, 0x59, 0x02, 0x00, 0x00,
}

func (m *IndividualTwilightReserveAccountBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndividualTwilightReserveAccountBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndividualTwilightReserveAccountBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintClearing(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReserveId != 0 {
		i = encodeVarintClearing(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAccountBalances) > 0 {
		for iNdEx := len(m.ReserveAccountBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveAccountBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClearing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.QQWithdrawAddress) > 0 {
		i -= len(m.QQWithdrawAddress)
		copy(dAtA[i:], m.QQWithdrawAddress)
		i = encodeVarintClearing(dAtA, i, uint64(len(m.QQWithdrawAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.QQDepositAddress) > 0 {
		i -= len(m.QQDepositAddress)
		copy(dAtA[i:], m.QQDepositAddress)
		i = encodeVarintClearing(dAtA, i, uint64(len(m.QQDepositAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BtcWithdrawAddress) > 0 {
		i -= len(m.BtcWithdrawAddress)
		copy(dAtA[i:], m.BtcWithdrawAddress)
		i = encodeVarintClearing(dAtA, i, uint64(len(m.BtcWithdrawAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtcDepositAddress) > 0 {
		i -= len(m.BtcDepositAddress)
		copy(dAtA[i:], m.BtcDepositAddress)
		i = encodeVarintClearing(dAtA, i, uint64(len(m.BtcDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TwilightAddress) > 0 {
		i -= len(m.TwilightAddress)
		copy(dAtA[i:], m.TwilightAddress)
		i = encodeVarintClearing(dAtA, i, uint64(len(m.TwilightAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClearing(dAtA []byte, offset int, v uint64) int {
	offset -= sovClearing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndividualTwilightReserveAccountBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovClearing(uint64(m.ReserveId))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovClearing(uint64(l))
	}
	return n
}

func (m *ClearingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwilightAddress)
	if l > 0 {
		n += 1 + l + sovClearing(uint64(l))
	}
	l = len(m.BtcDepositAddress)
	if l > 0 {
		n += 1 + l + sovClearing(uint64(l))
	}
	l = len(m.BtcWithdrawAddress)
	if l > 0 {
		n += 1 + l + sovClearing(uint64(l))
	}
	l = len(m.QQDepositAddress)
	if l > 0 {
		n += 1 + l + sovClearing(uint64(l))
	}
	l = len(m.QQWithdrawAddress)
	if l > 0 {
		n += 1 + l + sovClearing(uint64(l))
	}
	if len(m.ReserveAccountBalances) > 0 {
		for _, e := range m.ReserveAccountBalances {
			l = e.Size()
			n += 1 + l + sovClearing(uint64(l))
		}
	}
	return n
}

func sovClearing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClearing(x uint64) (n int) {
	return sovClearing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndividualTwilightReserveAccountBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClearing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndividualTwilightReserveAccountBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndividualTwilightReserveAccountBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClearing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClearing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClearing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcWithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcWithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QQDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QQDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QQWithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QQWithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAccountBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClearing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAccountBalances = append(m.ReserveAccountBalances, &IndividualTwilightReserveAccountBalance{})
			if err := m.ReserveAccountBalances[len(m.ReserveAccountBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClearing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClearing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClearing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClearing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClearing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClearing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClearing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClearing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClearing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClearing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClearing = fmt.Errorf("proto: unexpected end of group")
)
