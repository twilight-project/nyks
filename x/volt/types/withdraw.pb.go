// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/volt/withdraw.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Chain creates an internal mapping with identifier and bool confirmed
type BtcWithdrawRequest struct {
	WithdrawIdentifier          uint32 `protobuf:"varint,1,opt,name=withdrawIdentifier,proto3" json:"withdrawIdentifier,omitempty"`
	WithdrawAddress             string `protobuf:"bytes,2,opt,name=withdrawAddress,proto3" json:"withdrawAddress,omitempty"`
	WithdrawReserveId           uint64 `protobuf:"varint,3,opt,name=withdrawReserveId,proto3" json:"withdrawReserveId,omitempty"`
	WithdrawAmount              uint64 `protobuf:"varint,4,opt,name=withdrawAmount,proto3" json:"withdrawAmount,omitempty"`
	TwilightAddress             string `protobuf:"bytes,5,opt,name=twilightAddress,proto3" json:"twilightAddress,omitempty"`
	IsConfirmed                 bool   `protobuf:"varint,6,opt,name=isConfirmed,proto3" json:"isConfirmed,omitempty"`
	CreationTwilightBlockHeight int64  `protobuf:"varint,7,opt,name=CreationTwilightBlockHeight,proto3" json:"CreationTwilightBlockHeight,omitempty"`
}

func (m *BtcWithdrawRequest) Reset()         { *m = BtcWithdrawRequest{} }
func (m *BtcWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*BtcWithdrawRequest) ProtoMessage()    {}
func (*BtcWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f90771821fadb56e, []int{0}
}
func (m *BtcWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtcWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtcWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtcWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtcWithdrawRequest.Merge(m, src)
}
func (m *BtcWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *BtcWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BtcWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BtcWithdrawRequest proto.InternalMessageInfo

func (m *BtcWithdrawRequest) GetWithdrawIdentifier() uint32 {
	if m != nil {
		return m.WithdrawIdentifier
	}
	return 0
}

func (m *BtcWithdrawRequest) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

func (m *BtcWithdrawRequest) GetWithdrawReserveId() uint64 {
	if m != nil {
		return m.WithdrawReserveId
	}
	return 0
}

func (m *BtcWithdrawRequest) GetWithdrawAmount() uint64 {
	if m != nil {
		return m.WithdrawAmount
	}
	return 0
}

func (m *BtcWithdrawRequest) GetTwilightAddress() string {
	if m != nil {
		return m.TwilightAddress
	}
	return ""
}

func (m *BtcWithdrawRequest) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

func (m *BtcWithdrawRequest) GetCreationTwilightBlockHeight() int64 {
	if m != nil {
		return m.CreationTwilightBlockHeight
	}
	return 0
}

type ReserveWithdrawPool struct {
	ReserveID                     uint64   `protobuf:"varint,1,opt,name=ReserveID,proto3" json:"ReserveID,omitempty"`
	RoundID                       uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	ProcessingWithdrawIdentifiers []uint32 `protobuf:"varint,3,rep,packed,name=processingWithdrawIdentifiers,proto3" json:"processingWithdrawIdentifiers,omitempty"`
	QueuedWithdrawIdentifiers     []uint32 `protobuf:"varint,4,rep,packed,name=queuedWithdrawIdentifiers,proto3" json:"queuedWithdrawIdentifiers,omitempty"`
	CurrentProcessingIndex        uint32   `protobuf:"varint,5,opt,name=currentProcessingIndex,proto3" json:"currentProcessingIndex,omitempty"`
}

func (m *ReserveWithdrawPool) Reset()         { *m = ReserveWithdrawPool{} }
func (m *ReserveWithdrawPool) String() string { return proto.CompactTextString(m) }
func (*ReserveWithdrawPool) ProtoMessage()    {}
func (*ReserveWithdrawPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f90771821fadb56e, []int{1}
}
func (m *ReserveWithdrawPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveWithdrawPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveWithdrawPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveWithdrawPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveWithdrawPool.Merge(m, src)
}
func (m *ReserveWithdrawPool) XXX_Size() int {
	return m.Size()
}
func (m *ReserveWithdrawPool) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveWithdrawPool.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveWithdrawPool proto.InternalMessageInfo

func (m *ReserveWithdrawPool) GetReserveID() uint64 {
	if m != nil {
		return m.ReserveID
	}
	return 0
}

func (m *ReserveWithdrawPool) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *ReserveWithdrawPool) GetProcessingWithdrawIdentifiers() []uint32 {
	if m != nil {
		return m.ProcessingWithdrawIdentifiers
	}
	return nil
}

func (m *ReserveWithdrawPool) GetQueuedWithdrawIdentifiers() []uint32 {
	if m != nil {
		return m.QueuedWithdrawIdentifiers
	}
	return nil
}

func (m *ReserveWithdrawPool) GetCurrentProcessingIndex() uint32 {
	if m != nil {
		return m.CurrentProcessingIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*BtcWithdrawRequest)(nil), "twilightproject.nyks.volt.BtcWithdrawRequest")
	proto.RegisterType((*ReserveWithdrawPool)(nil), "twilightproject.nyks.volt.ReserveWithdrawPool")
}

func init() { proto.RegisterFile("nyks/volt/withdraw.proto", fileDescriptor_f90771821fadb56e) }

var fileDescriptor_f90771821fadb56e = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x6f, 0xd3, 0x30,
	0x18, 0xad, 0x9b, 0xb0, 0x31, 0xa3, 0x82, 0x30, 0x12, 0xf2, 0x04, 0x44, 0xd1, 0x0e, 0x28, 0x07,
	0x96, 0x1c, 0x90, 0x38, 0x71, 0x80, 0xae, 0x12, 0xe4, 0x36, 0x59, 0x48, 0x93, 0xb8, 0x6d, 0xf1,
	0xb7, 0xd6, 0x2c, 0xb5, 0x33, 0xdb, 0x69, 0xda, 0x3f, 0x81, 0x1b, 0x7f, 0x16, 0xc7, 0x8a, 0x13,
	0x47, 0xd4, 0xfe, 0x23, 0x28, 0x69, 0x5c, 0x50, 0x7f, 0xdd, 0x92, 0xf7, 0xbd, 0xef, 0x3d, 0x7d,
	0xcf, 0x0f, 0x53, 0x39, 0xbb, 0x33, 0xc9, 0x44, 0xe5, 0x36, 0xa9, 0x84, 0x1d, 0x71, 0x7d, 0x5d,
	0xc5, 0x85, 0x56, 0x56, 0x91, 0x53, 0x5b, 0x89, 0x5c, 0x0c, 0x47, 0xb6, 0xd0, 0xea, 0x1b, 0x64,
	0x36, 0xae, 0x99, 0x71, 0xcd, 0x3c, 0xfb, 0xd5, 0xc5, 0xa4, 0x6f, 0xb3, 0xab, 0x76, 0x81, 0xc1,
	0x7d, 0x09, 0xc6, 0x92, 0x18, 0x13, 0xa7, 0x91, 0x72, 0x90, 0x56, 0xdc, 0x0a, 0xd0, 0x14, 0x85,
	0x28, 0xea, 0xb1, 0x1d, 0x13, 0x12, 0xe1, 0x27, 0x0e, 0xfd, 0xc8, 0xb9, 0x06, 0x63, 0x68, 0x37,
	0x44, 0xd1, 0x09, 0xdb, 0x84, 0xc9, 0x1b, 0xfc, 0xb4, 0x5a, 0x9b, 0x19, 0xd0, 0x13, 0x48, 0x39,
	0xf5, 0x42, 0x14, 0xf9, 0x6c, 0x7b, 0x40, 0x5e, 0xe3, 0xc7, 0x6b, 0x81, 0xb1, 0x2a, 0xa5, 0xa5,
	0x7e, 0x43, 0xdd, 0x40, 0x6b, 0x7f, 0x77, 0xa3, 0xf3, 0x7f, 0xb0, 0xf2, 0xdf, 0x80, 0x49, 0x88,
	0x1f, 0x09, 0x73, 0xa1, 0xe4, 0xad, 0xd0, 0x63, 0xe0, 0xf4, 0x28, 0x44, 0xd1, 0x43, 0xf6, 0x3f,
	0x44, 0x3e, 0xe0, 0x17, 0x17, 0x1a, 0xae, 0xad, 0x50, 0xf2, 0x4b, 0xbb, 0xdc, 0xcf, 0x55, 0x76,
	0xf7, 0x19, 0xea, 0x4f, 0x7a, 0x1c, 0xa2, 0xc8, 0x63, 0x87, 0x28, 0x67, 0xdf, 0xbb, 0xf8, 0x59,
	0x7b, 0x83, 0x0b, 0xf6, 0x52, 0xa9, 0x9c, 0xbc, 0xc4, 0x27, 0xee, 0xb4, 0x41, 0x13, 0xa6, 0xcf,
	0xfe, 0x01, 0x84, 0xe2, 0x63, 0xa6, 0x4a, 0xc9, 0xd3, 0x41, 0x93, 0x9d, 0xcf, 0xdc, 0x2f, 0x19,
	0xe0, 0x57, 0x85, 0x56, 0x19, 0x18, 0x23, 0xe4, 0xf0, 0x6a, 0x2b, 0x7d, 0x43, 0xbd, 0xd0, 0x8b,
	0x7a, 0xec, 0x30, 0x89, 0xbc, 0xc7, 0xa7, 0xf7, 0x25, 0x94, 0xc0, 0x77, 0x29, 0xf8, 0x8d, 0xc2,
	0x7e, 0x02, 0x79, 0x87, 0x9f, 0x67, 0xa5, 0xd6, 0x20, 0xed, 0xe5, 0xda, 0x25, 0x95, 0x1c, 0xa6,
	0x4d, 0xd0, 0x3d, 0xb6, 0x67, 0xda, 0xff, 0xf4, 0x73, 0x11, 0xa0, 0xf9, 0x22, 0x40, 0x7f, 0x16,
	0x01, 0xfa, 0xb1, 0x0c, 0x3a, 0xf3, 0x65, 0xd0, 0xf9, 0xbd, 0x0c, 0x3a, 0x5f, 0xcf, 0x87, 0xc2,
	0x8e, 0xca, 0x9b, 0x38, 0x53, 0xe3, 0xc4, 0xbd, 0xd2, 0x79, 0xdb, 0xd0, 0xa4, 0xe9, 0xf2, 0x74,
	0xd5, 0x66, 0x3b, 0x2b, 0xc0, 0xdc, 0x1c, 0x35, 0x5d, 0x7e, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x82, 0x21, 0xd2, 0x85, 0xe7, 0x02, 0x00, 0x00,
}

func (m *BtcWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtcWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BtcWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationTwilightBlockHeight != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.CreationTwilightBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.IsConfirmed {
		i--
		if m.IsConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.TwilightAddress) > 0 {
		i -= len(m.TwilightAddress)
		copy(dAtA[i:], m.TwilightAddress)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.TwilightAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.WithdrawAmount != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.WithdrawAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.WithdrawReserveId != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.WithdrawReserveId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.WithdrawIdentifier != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.WithdrawIdentifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveWithdrawPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveWithdrawPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveWithdrawPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentProcessingIndex != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.CurrentProcessingIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.QueuedWithdrawIdentifiers) > 0 {
		dAtA2 := make([]byte, len(m.QueuedWithdrawIdentifiers)*10)
		var j1 int
		for _, num := range m.QueuedWithdrawIdentifiers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintWithdraw(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProcessingWithdrawIdentifiers) > 0 {
		dAtA4 := make([]byte, len(m.ProcessingWithdrawIdentifiers)*10)
		var j3 int
		for _, num := range m.ProcessingWithdrawIdentifiers {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintWithdraw(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoundID != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.RoundID))
		i--
		dAtA[i] = 0x10
	}
	if m.ReserveID != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.ReserveID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWithdraw(dAtA []byte, offset int, v uint64) int {
	offset -= sovWithdraw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BtcWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithdrawIdentifier != 0 {
		n += 1 + sovWithdraw(uint64(m.WithdrawIdentifier))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	if m.WithdrawReserveId != 0 {
		n += 1 + sovWithdraw(uint64(m.WithdrawReserveId))
	}
	if m.WithdrawAmount != 0 {
		n += 1 + sovWithdraw(uint64(m.WithdrawAmount))
	}
	l = len(m.TwilightAddress)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	if m.IsConfirmed {
		n += 2
	}
	if m.CreationTwilightBlockHeight != 0 {
		n += 1 + sovWithdraw(uint64(m.CreationTwilightBlockHeight))
	}
	return n
}

func (m *ReserveWithdrawPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveID != 0 {
		n += 1 + sovWithdraw(uint64(m.ReserveID))
	}
	if m.RoundID != 0 {
		n += 1 + sovWithdraw(uint64(m.RoundID))
	}
	if len(m.ProcessingWithdrawIdentifiers) > 0 {
		l = 0
		for _, e := range m.ProcessingWithdrawIdentifiers {
			l += sovWithdraw(uint64(e))
		}
		n += 1 + sovWithdraw(uint64(l)) + l
	}
	if len(m.QueuedWithdrawIdentifiers) > 0 {
		l = 0
		for _, e := range m.QueuedWithdrawIdentifiers {
			l += sovWithdraw(uint64(e))
		}
		n += 1 + sovWithdraw(uint64(l)) + l
	}
	if m.CurrentProcessingIndex != 0 {
		n += 1 + sovWithdraw(uint64(m.CurrentProcessingIndex))
	}
	return n
}

func sovWithdraw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWithdraw(x uint64) (n int) {
	return sovWithdraw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BtcWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtcWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtcWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawIdentifier", wireType)
			}
			m.WithdrawIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawIdentifier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawReserveId", wireType)
			}
			m.WithdrawReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			m.WithdrawAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConfirmed = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTwilightBlockHeight", wireType)
			}
			m.CreationTwilightBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTwilightBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveWithdrawPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveWithdrawPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveWithdrawPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveID", wireType)
			}
			m.ReserveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundID", wireType)
			}
			m.RoundID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWithdraw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProcessingWithdrawIdentifiers = append(m.ProcessingWithdrawIdentifiers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWithdraw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWithdraw
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWithdraw
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProcessingWithdrawIdentifiers) == 0 {
					m.ProcessingWithdrawIdentifiers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWithdraw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProcessingWithdrawIdentifiers = append(m.ProcessingWithdrawIdentifiers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingWithdrawIdentifiers", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWithdraw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.QueuedWithdrawIdentifiers = append(m.QueuedWithdrawIdentifiers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWithdraw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWithdraw
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWithdraw
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.QueuedWithdrawIdentifiers) == 0 {
					m.QueuedWithdrawIdentifiers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWithdraw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.QueuedWithdrawIdentifiers = append(m.QueuedWithdrawIdentifiers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedWithdrawIdentifiers", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentProcessingIndex", wireType)
			}
			m.CurrentProcessingIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentProcessingIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWithdraw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWithdraw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWithdraw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWithdraw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWithdraw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWithdraw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWithdraw = fmt.Errorf("proto: unexpected end of group")
)
