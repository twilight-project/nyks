// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: volt/reserve.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BtcReserve struct {
	ReserveId             uint64   `protobuf:"varint,1,opt,name=ReserveId,proto3" json:"ReserveId,omitempty"`
	ValidatorAddress      string   `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"`
	BtcRelayCapacityValue uint64   `protobuf:"varint,3,opt,name=BtcRelayCapacityValue,proto3" json:"BtcRelayCapacityValue,omitempty"`
	TotalValue            uint64   `protobuf:"varint,4,opt,name=TotalValue,proto3" json:"TotalValue,omitempty"`
	PrivatePoolValue      uint64   `protobuf:"varint,5,opt,name=PrivatePoolValue,proto3" json:"PrivatePoolValue,omitempty"`
	PublicValue           uint64   `protobuf:"varint,6,opt,name=PublicValue,proto3" json:"PublicValue,omitempty"`
	FeePool               uint64   `protobuf:"varint,7,opt,name=FeePool,proto3" json:"FeePool,omitempty"`
	TwilightAddresses     []string `protobuf:"bytes,8,rep,name=TwilightAddresses,proto3" json:"TwilightAddresses,omitempty"`
}

func (m *BtcReserve) Reset()         { *m = BtcReserve{} }
func (m *BtcReserve) String() string { return proto.CompactTextString(m) }
func (*BtcReserve) ProtoMessage()    {}
func (*BtcReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_583498972364f69e, []int{0}
}
func (m *BtcReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtcReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtcReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtcReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtcReserve.Merge(m, src)
}
func (m *BtcReserve) XXX_Size() int {
	return m.Size()
}
func (m *BtcReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_BtcReserve.DiscardUnknown(m)
}

var xxx_messageInfo_BtcReserve proto.InternalMessageInfo

func (m *BtcReserve) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *BtcReserve) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *BtcReserve) GetBtcRelayCapacityValue() uint64 {
	if m != nil {
		return m.BtcRelayCapacityValue
	}
	return 0
}

func (m *BtcReserve) GetTotalValue() uint64 {
	if m != nil {
		return m.TotalValue
	}
	return 0
}

func (m *BtcReserve) GetPrivatePoolValue() uint64 {
	if m != nil {
		return m.PrivatePoolValue
	}
	return 0
}

func (m *BtcReserve) GetPublicValue() uint64 {
	if m != nil {
		return m.PublicValue
	}
	return 0
}

func (m *BtcReserve) GetFeePool() uint64 {
	if m != nil {
		return m.FeePool
	}
	return 0
}

func (m *BtcReserve) GetTwilightAddresses() []string {
	if m != nil {
		return m.TwilightAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*BtcReserve)(nil), "twilightproject.nyks.volt.BtcReserve")
}

func init() { proto.RegisterFile("volt/reserve.proto", fileDescriptor_583498972364f69e) }

var fileDescriptor_583498972364f69e = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0xfb, 0x30,
	0x1c, 0xc7, 0x97, 0x6d, 0xff, 0xed, 0xbf, 0x78, 0xd1, 0x80, 0x10, 0x41, 0x42, 0xf1, 0x34, 0xc4,
	0xb5, 0x07, 0x7d, 0x01, 0x27, 0x28, 0xde, 0x46, 0x19, 0x3b, 0x78, 0x4b, 0xdb, 0xb0, 0x45, 0xa3,
	0x29, 0xc9, 0xaf, 0xd5, 0xbe, 0x85, 0xcf, 0xe4, 0xc9, 0xe3, 0x8e, 0x1e, 0xa5, 0x7d, 0x11, 0x69,
	0xda, 0xe1, 0xa0, 0xde, 0x92, 0xef, 0xf7, 0x93, 0x1f, 0x49, 0x3e, 0x98, 0xe4, 0x5a, 0x41, 0x60,
	0x84, 0x15, 0x26, 0x17, 0x7e, 0x6a, 0x34, 0x68, 0x72, 0x02, 0xaf, 0x52, 0xc9, 0xf5, 0x06, 0x52,
	0xa3, 0x1f, 0x45, 0x0c, 0xfe, 0x4b, 0xf1, 0x64, 0xfd, 0x1a, 0x3c, 0xfb, 0xe8, 0x63, 0x3c, 0x87,
	0x38, 0x6c, 0x78, 0x72, 0x8a, 0x27, 0xed, 0xf2, 0x3e, 0xa1, 0xc8, 0x43, 0xd3, 0x61, 0xf8, 0x1b,
	0x90, 0x73, 0x7c, 0xb8, 0xe2, 0x4a, 0x26, 0x1c, 0xb4, 0xb9, 0x4e, 0x12, 0x23, 0xac, 0xa5, 0x7d,
	0x0f, 0x4d, 0x27, 0x61, 0x27, 0x27, 0x57, 0xf8, 0xd8, 0xcd, 0x55, 0xbc, 0xb8, 0xe1, 0x29, 0x8f,
	0x25, 0x14, 0x2b, 0xae, 0x32, 0x41, 0x07, 0x6e, 0xea, 0xdf, 0x25, 0x61, 0x18, 0x2f, 0x35, 0x70,
	0xd5, 0xa0, 0x43, 0x87, 0xee, 0x25, 0xf5, 0x0d, 0x16, 0x46, 0xe6, 0x1c, 0xc4, 0x42, 0xeb, 0x96,
	0xfa, 0xe7, 0xa8, 0x4e, 0x4e, 0x3c, 0x7c, 0xb0, 0xc8, 0x22, 0x25, 0xe3, 0x06, 0x1b, 0x39, 0x6c,
	0x3f, 0x22, 0x14, 0x8f, 0x6f, 0x85, 0x3b, 0x41, 0xc7, 0xae, 0xdd, 0x6d, 0xc9, 0x05, 0x3e, 0x5a,
	0xb6, 0x7f, 0xd6, 0x3e, 0x48, 0x58, 0xfa, 0xdf, 0x1b, 0x4c, 0x27, 0x61, 0xb7, 0x98, 0xdf, 0x7d,
	0x96, 0x0c, 0x6d, 0x4b, 0x86, 0xbe, 0x4b, 0x86, 0xde, 0x2b, 0xd6, 0xdb, 0x56, 0xac, 0xf7, 0x55,
	0xb1, 0xde, 0xc3, 0x6c, 0x2d, 0x61, 0x93, 0x45, 0x7e, 0xac, 0x9f, 0x83, 0x9d, 0x84, 0x59, 0x6b,
	0x21, 0xa8, 0x2d, 0x04, 0x6f, 0x81, 0x13, 0x06, 0x45, 0x2a, 0x6c, 0x34, 0x72, 0xbe, 0x2e, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x07, 0xc3, 0xe2, 0xce, 0xc5, 0x01, 0x00, 0x00,
}

func (m *BtcReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtcReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BtcReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightAddresses) > 0 {
		for iNdEx := len(m.TwilightAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TwilightAddresses[iNdEx])
			copy(dAtA[i:], m.TwilightAddresses[iNdEx])
			i = encodeVarintReserve(dAtA, i, uint64(len(m.TwilightAddresses[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FeePool != 0 {
		i = encodeVarintReserve(dAtA, i, uint64(m.FeePool))
		i--
		dAtA[i] = 0x38
	}
	if m.PublicValue != 0 {
		i = encodeVarintReserve(dAtA, i, uint64(m.PublicValue))
		i--
		dAtA[i] = 0x30
	}
	if m.PrivatePoolValue != 0 {
		i = encodeVarintReserve(dAtA, i, uint64(m.PrivatePoolValue))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalValue != 0 {
		i = encodeVarintReserve(dAtA, i, uint64(m.TotalValue))
		i--
		dAtA[i] = 0x20
	}
	if m.BtcRelayCapacityValue != 0 {
		i = encodeVarintReserve(dAtA, i, uint64(m.BtcRelayCapacityValue))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintReserve(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReserveId != 0 {
		i = encodeVarintReserve(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReserve(dAtA []byte, offset int, v uint64) int {
	offset -= sovReserve(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BtcReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovReserve(uint64(m.ReserveId))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovReserve(uint64(l))
	}
	if m.BtcRelayCapacityValue != 0 {
		n += 1 + sovReserve(uint64(m.BtcRelayCapacityValue))
	}
	if m.TotalValue != 0 {
		n += 1 + sovReserve(uint64(m.TotalValue))
	}
	if m.PrivatePoolValue != 0 {
		n += 1 + sovReserve(uint64(m.PrivatePoolValue))
	}
	if m.PublicValue != 0 {
		n += 1 + sovReserve(uint64(m.PublicValue))
	}
	if m.FeePool != 0 {
		n += 1 + sovReserve(uint64(m.FeePool))
	}
	if len(m.TwilightAddresses) > 0 {
		for _, s := range m.TwilightAddresses {
			l = len(s)
			n += 1 + l + sovReserve(uint64(l))
		}
	}
	return n
}

func sovReserve(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReserve(x uint64) (n int) {
	return sovReserve(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BtcReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReserve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtcReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtcReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReserve
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReserve
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcRelayCapacityValue", wireType)
			}
			m.BtcRelayCapacityValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcRelayCapacityValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
			}
			m.TotalValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivatePoolValue", wireType)
			}
			m.PrivatePoolValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivatePoolValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicValue", wireType)
			}
			m.PublicValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePool", wireType)
			}
			m.FeePool = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeePool |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReserve
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReserve
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightAddresses = append(m.TwilightAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReserve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReserve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReserve(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReserve
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReserve
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReserve
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReserve
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReserve
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReserve        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReserve          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReserve = fmt.Errorf("proto: unexpected end of group")
)
