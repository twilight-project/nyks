// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/forks/satoshitest.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SatoshiTest struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,2,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
	DepositAmount          uint64 `protobuf:"varint,3,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`
	BlockHeight            int64  `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	IsConfirmed            bool   `protobuf:"varint,5,opt,name=isConfirmed,proto3" json:"isConfirmed,omitempty"`
}

func (m *SatoshiTest) Reset()         { *m = SatoshiTest{} }
func (m *SatoshiTest) String() string { return proto.CompactTextString(m) }
func (*SatoshiTest) ProtoMessage()    {}
func (*SatoshiTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ebd25bf01bc8fd, []int{0}
}
func (m *SatoshiTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SatoshiTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SatoshiTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SatoshiTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatoshiTest.Merge(m, src)
}
func (m *SatoshiTest) XXX_Size() int {
	return m.Size()
}
func (m *SatoshiTest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatoshiTest.DiscardUnknown(m)
}

var xxx_messageInfo_SatoshiTest proto.InternalMessageInfo

func (m *SatoshiTest) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *SatoshiTest) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

func (m *SatoshiTest) GetDepositAmount() uint64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *SatoshiTest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *SatoshiTest) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

func init() {
	proto.RegisterType((*SatoshiTest)(nil), "twilightproject.nyks.forks.SatoshiTest")
}

func init() { proto.RegisterFile("nyks/forks/satoshitest.proto", fileDescriptor_f0ebd25bf01bc8fd) }

var fileDescriptor_f0ebd25bf01bc8fd = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0x87, 0x73, 0xb6, 0x8a, 0x5e, 0xd1, 0xe1, 0x06, 0x09, 0x22, 0xc7, 0x21, 0x22, 0x59, 0xbc,
	0x0c, 0x82, 0xbb, 0x7f, 0x86, 0xce, 0xd1, 0xc9, 0xcd, 0x24, 0xd7, 0xe6, 0x4c, 0x93, 0x37, 0xdc,
	0xfb, 0x16, 0xed, 0xb7, 0xf0, 0x63, 0x39, 0x76, 0xd3, 0x51, 0x92, 0x2f, 0x22, 0x89, 0x0d, 0x34,
	0x82, 0xeb, 0x73, 0xcf, 0xfd, 0x78, 0x79, 0xf8, 0x69, 0xb9, 0xca, 0x31, 0x9c, 0x81, 0xcb, 0x31,
	0xc4, 0x67, 0x02, 0xcc, 0x2c, 0x19, 0x24, 0x5d, 0x39, 0x20, 0x10, 0x27, 0xf4, 0x6a, 0x17, 0x76,
	0x9e, 0x51, 0xe5, 0xe0, 0xc5, 0x24, 0xa4, 0x5b, 0x5b, 0x77, 0xf6, 0xd9, 0x27, 0xe3, 0x93, 0x87,
	0xdf, 0x1f, 0x8f, 0x06, 0x49, 0x5c, 0xf0, 0xa3, 0xd4, 0x54, 0x80, 0x96, 0x6e, 0xd2, 0xd4, 0x19,
	0x44, 0x9f, 0x29, 0x16, 0x1c, 0x44, 0x7f, 0xa8, 0xb8, 0xe6, 0xc7, 0xfd, 0xea, 0xfd, 0xd0, 0xdf,
	0xe9, 0xfc, 0x7f, 0x5e, 0xc5, 0x39, 0x3f, 0xec, 0x97, 0x0a, 0x58, 0x96, 0xe4, 0x8f, 0x14, 0x0b,
	0xc6, 0xd1, 0x10, 0x0a, 0xc5, 0x27, 0xf1, 0x02, 0x92, 0x7c, 0x6a, 0xda, 0x09, 0x7f, 0xac, 0x58,
	0x30, 0x8a, 0xb6, 0x51, 0x6b, 0x58, 0xbc, 0x83, 0x72, 0x66, 0x5d, 0x61, 0x52, 0x7f, 0x57, 0xb1,
	0x60, 0x3f, 0xda, 0x46, 0xb7, 0xd3, 0x8f, 0x5a, 0xb2, 0x75, 0x2d, 0xd9, 0x77, 0x2d, 0xd9, 0x7b,
	0x23, 0xbd, 0x75, 0x23, 0xbd, 0xaf, 0x46, 0x7a, 0x4f, 0x7a, 0x6e, 0x29, 0x5b, 0xc6, 0x3a, 0x81,
	0x22, 0xec, 0xcf, 0xbc, 0xdc, 0xb4, 0x09, 0xbb, 0x92, 0x6f, 0x9b, 0x96, 0xb4, 0xaa, 0x0c, 0xc6,
	0x7b, 0x5d, 0xc6, 0xab, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0x8c, 0x8d, 0x89, 0x66, 0x01,
	0x00, 0x00,
}

func (m *SatoshiTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SatoshiTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SatoshiTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsConfirmed {
		i--
		if m.IsConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintSatoshitest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.DepositAmount != 0 {
		i = encodeVarintSatoshitest(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintSatoshitest(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintSatoshitest(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSatoshitest(dAtA []byte, offset int, v uint64) int {
	offset -= sovSatoshitest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SatoshiTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovSatoshitest(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovSatoshitest(uint64(l))
	}
	if m.DepositAmount != 0 {
		n += 1 + sovSatoshitest(uint64(m.DepositAmount))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovSatoshitest(uint64(m.BlockHeight))
	}
	if m.IsConfirmed {
		n += 2
	}
	return n
}

func sovSatoshitest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSatoshitest(x uint64) (n int) {
	return sovSatoshitest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SatoshiTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSatoshitest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SatoshiTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SatoshiTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSatoshitest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSatoshitest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSatoshitest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSatoshitest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConfirmed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSatoshitest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSatoshitest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSatoshitest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSatoshitest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSatoshitest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSatoshitest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSatoshitest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSatoshitest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSatoshitest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSatoshitest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSatoshitest = fmt.Errorf("proto: unexpected end of group")
)
