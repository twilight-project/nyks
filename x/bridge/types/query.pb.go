// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/bridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryRegisteredBtcDepositAddressesRequest struct {
}

func (m *QueryRegisteredBtcDepositAddressesRequest) Reset() {
	*m = QueryRegisteredBtcDepositAddressesRequest{}
}
func (m *QueryRegisteredBtcDepositAddressesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRegisteredBtcDepositAddressesRequest) ProtoMessage() {}
func (*QueryRegisteredBtcDepositAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{2}
}
func (m *QueryRegisteredBtcDepositAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredBtcDepositAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredBtcDepositAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredBtcDepositAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressesRequest.Merge(m, src)
}
func (m *QueryRegisteredBtcDepositAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredBtcDepositAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredBtcDepositAddressesRequest proto.InternalMessageInfo

type QueryRegisteredBtcDepositAddressesResponse struct {
	Addresses []MsgRegisterBtcDepositAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses"`
}

func (m *QueryRegisteredBtcDepositAddressesResponse) Reset() {
	*m = QueryRegisteredBtcDepositAddressesResponse{}
}
func (m *QueryRegisteredBtcDepositAddressesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRegisteredBtcDepositAddressesResponse) ProtoMessage() {}
func (*QueryRegisteredBtcDepositAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{3}
}
func (m *QueryRegisteredBtcDepositAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredBtcDepositAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredBtcDepositAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredBtcDepositAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressesResponse.Merge(m, src)
}
func (m *QueryRegisteredBtcDepositAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredBtcDepositAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredBtcDepositAddressesResponse proto.InternalMessageInfo

func (m *QueryRegisteredBtcDepositAddressesResponse) GetAddresses() []MsgRegisterBtcDepositAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type QueryRegisteredReserveAddressesRequest struct {
}

func (m *QueryRegisteredReserveAddressesRequest) Reset() {
	*m = QueryRegisteredReserveAddressesRequest{}
}
func (m *QueryRegisteredReserveAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredReserveAddressesRequest) ProtoMessage()    {}
func (*QueryRegisteredReserveAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{4}
}
func (m *QueryRegisteredReserveAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredReserveAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredReserveAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredReserveAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredReserveAddressesRequest.Merge(m, src)
}
func (m *QueryRegisteredReserveAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredReserveAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredReserveAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredReserveAddressesRequest proto.InternalMessageInfo

type QueryRegisteredReserveAddressesResponse struct {
	Addresses []MsgRegisterReserveAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses"`
}

func (m *QueryRegisteredReserveAddressesResponse) Reset() {
	*m = QueryRegisteredReserveAddressesResponse{}
}
func (m *QueryRegisteredReserveAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredReserveAddressesResponse) ProtoMessage()    {}
func (*QueryRegisteredReserveAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{5}
}
func (m *QueryRegisteredReserveAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredReserveAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredReserveAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredReserveAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredReserveAddressesResponse.Merge(m, src)
}
func (m *QueryRegisteredReserveAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredReserveAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredReserveAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredReserveAddressesResponse proto.InternalMessageInfo

func (m *QueryRegisteredReserveAddressesResponse) GetAddresses() []MsgRegisterReserveAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type QueryRegisteredBtcDepositAddressRequest struct {
	DepositAddress string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
}

func (m *QueryRegisteredBtcDepositAddressRequest) Reset() {
	*m = QueryRegisteredBtcDepositAddressRequest{}
}
func (m *QueryRegisteredBtcDepositAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredBtcDepositAddressRequest) ProtoMessage()    {}
func (*QueryRegisteredBtcDepositAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{6}
}
func (m *QueryRegisteredBtcDepositAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredBtcDepositAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredBtcDepositAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredBtcDepositAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressRequest.Merge(m, src)
}
func (m *QueryRegisteredBtcDepositAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredBtcDepositAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredBtcDepositAddressRequest proto.InternalMessageInfo

func (m *QueryRegisteredBtcDepositAddressRequest) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

type QueryRegisteredBtcDepositAddressResponse struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,2,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *QueryRegisteredBtcDepositAddressResponse) Reset() {
	*m = QueryRegisteredBtcDepositAddressResponse{}
}
func (m *QueryRegisteredBtcDepositAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredBtcDepositAddressResponse) ProtoMessage()    {}
func (*QueryRegisteredBtcDepositAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{7}
}
func (m *QueryRegisteredBtcDepositAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredBtcDepositAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredBtcDepositAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredBtcDepositAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressResponse.Merge(m, src)
}
func (m *QueryRegisteredBtcDepositAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredBtcDepositAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredBtcDepositAddressResponse proto.InternalMessageInfo

func (m *QueryRegisteredBtcDepositAddressResponse) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *QueryRegisteredBtcDepositAddressResponse) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

type QueryRegisteredBtcDepositAddressByTwilightAddressRequest struct {
	TwilightDepositAddress string `protobuf:"bytes,1,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) Reset() {
	*m = QueryRegisteredBtcDepositAddressByTwilightAddressRequest{}
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRegisteredBtcDepositAddressByTwilightAddressRequest) ProtoMessage() {}
func (*QueryRegisteredBtcDepositAddressByTwilightAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{8}
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressRequest.Merge(m, src)
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressRequest proto.InternalMessageInfo

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

type QueryRegisteredBtcDepositAddressByTwilightAddressResponse struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,2,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) Reset() {
	*m = QueryRegisteredBtcDepositAddressByTwilightAddressResponse{}
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRegisteredBtcDepositAddressByTwilightAddressResponse) ProtoMessage() {}
func (*QueryRegisteredBtcDepositAddressByTwilightAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{9}
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressResponse.Merge(m, src)
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredBtcDepositAddressByTwilightAddressResponse proto.InternalMessageInfo

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

// this line is used by starport scaffolding # 3
type QueryRegisteredJudgeAddressByValidatorAddressRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) Reset() {
	*m = QueryRegisteredJudgeAddressByValidatorAddressRequest{}
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRegisteredJudgeAddressByValidatorAddressRequest) ProtoMessage() {}
func (*QueryRegisteredJudgeAddressByValidatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{10}
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressRequest.Merge(m, src)
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressRequest proto.InternalMessageInfo

func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryRegisteredJudgeAddressByValidatorAddressResponse struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JudgeAddress     string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) Reset() {
	*m = QueryRegisteredJudgeAddressByValidatorAddressResponse{}
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRegisteredJudgeAddressByValidatorAddressResponse) ProtoMessage() {}
func (*QueryRegisteredJudgeAddressByValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{11}
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressResponse.Merge(m, src)
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredJudgeAddressByValidatorAddressResponse proto.InternalMessageInfo

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryRegisteredJudgesRequest struct {
}

func (m *QueryRegisteredJudgesRequest) Reset()         { *m = QueryRegisteredJudgesRequest{} }
func (m *QueryRegisteredJudgesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredJudgesRequest) ProtoMessage()    {}
func (*QueryRegisteredJudgesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{12}
}
func (m *QueryRegisteredJudgesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredJudgesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredJudgesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredJudgesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredJudgesRequest.Merge(m, src)
}
func (m *QueryRegisteredJudgesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredJudgesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredJudgesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredJudgesRequest proto.InternalMessageInfo

type QueryRegisteredJudgesResponse struct {
	Judges []MsgRegisterJudge `protobuf:"bytes,1,rep,name=Judges,proto3" json:"Judges"`
}

func (m *QueryRegisteredJudgesResponse) Reset()         { *m = QueryRegisteredJudgesResponse{} }
func (m *QueryRegisteredJudgesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredJudgesResponse) ProtoMessage()    {}
func (*QueryRegisteredJudgesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{13}
}
func (m *QueryRegisteredJudgesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredJudgesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredJudgesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredJudgesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredJudgesResponse.Merge(m, src)
}
func (m *QueryRegisteredJudgesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredJudgesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredJudgesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredJudgesResponse proto.InternalMessageInfo

func (m *QueryRegisteredJudgesResponse) GetJudges() []MsgRegisterJudge {
	if m != nil {
		return m.Judges
	}
	return nil
}

type QueryWithdrawBtcRequestAllRequest struct {
}

func (m *QueryWithdrawBtcRequestAllRequest) Reset()         { *m = QueryWithdrawBtcRequestAllRequest{} }
func (m *QueryWithdrawBtcRequestAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawBtcRequestAllRequest) ProtoMessage()    {}
func (*QueryWithdrawBtcRequestAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{14}
}
func (m *QueryWithdrawBtcRequestAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawBtcRequestAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawBtcRequestAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawBtcRequestAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawBtcRequestAllRequest.Merge(m, src)
}
func (m *QueryWithdrawBtcRequestAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawBtcRequestAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawBtcRequestAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawBtcRequestAllRequest proto.InternalMessageInfo

type QueryWithdrawBtcRequestAllResponse struct {
	WithdrawRequest []MsgWithdrawBtcRequest `protobuf:"bytes,1,rep,name=withdrawRequest,proto3" json:"withdrawRequest"`
}

func (m *QueryWithdrawBtcRequestAllResponse) Reset()         { *m = QueryWithdrawBtcRequestAllResponse{} }
func (m *QueryWithdrawBtcRequestAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawBtcRequestAllResponse) ProtoMessage()    {}
func (*QueryWithdrawBtcRequestAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8482370855e6a811, []int{15}
}
func (m *QueryWithdrawBtcRequestAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawBtcRequestAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawBtcRequestAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawBtcRequestAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawBtcRequestAllResponse.Merge(m, src)
}
func (m *QueryWithdrawBtcRequestAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawBtcRequestAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawBtcRequestAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawBtcRequestAllResponse proto.InternalMessageInfo

func (m *QueryWithdrawBtcRequestAllResponse) GetWithdrawRequest() []MsgWithdrawBtcRequest {
	if m != nil {
		return m.WithdrawRequest
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "twilightproject.nyks.bridge.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "twilightproject.nyks.bridge.QueryParamsResponse")
	proto.RegisterType((*QueryRegisteredBtcDepositAddressesRequest)(nil), "twilightproject.nyks.bridge.QueryRegisteredBtcDepositAddressesRequest")
	proto.RegisterType((*QueryRegisteredBtcDepositAddressesResponse)(nil), "twilightproject.nyks.bridge.QueryRegisteredBtcDepositAddressesResponse")
	proto.RegisterType((*QueryRegisteredReserveAddressesRequest)(nil), "twilightproject.nyks.bridge.QueryRegisteredReserveAddressesRequest")
	proto.RegisterType((*QueryRegisteredReserveAddressesResponse)(nil), "twilightproject.nyks.bridge.QueryRegisteredReserveAddressesResponse")
	proto.RegisterType((*QueryRegisteredBtcDepositAddressRequest)(nil), "twilightproject.nyks.bridge.QueryRegisteredBtcDepositAddressRequest")
	proto.RegisterType((*QueryRegisteredBtcDepositAddressResponse)(nil), "twilightproject.nyks.bridge.QueryRegisteredBtcDepositAddressResponse")
	proto.RegisterType((*QueryRegisteredBtcDepositAddressByTwilightAddressRequest)(nil), "twilightproject.nyks.bridge.QueryRegisteredBtcDepositAddressByTwilightAddressRequest")
	proto.RegisterType((*QueryRegisteredBtcDepositAddressByTwilightAddressResponse)(nil), "twilightproject.nyks.bridge.QueryRegisteredBtcDepositAddressByTwilightAddressResponse")
	proto.RegisterType((*QueryRegisteredJudgeAddressByValidatorAddressRequest)(nil), "twilightproject.nyks.bridge.QueryRegisteredJudgeAddressByValidatorAddressRequest")
	proto.RegisterType((*QueryRegisteredJudgeAddressByValidatorAddressResponse)(nil), "twilightproject.nyks.bridge.QueryRegisteredJudgeAddressByValidatorAddressResponse")
	proto.RegisterType((*QueryRegisteredJudgesRequest)(nil), "twilightproject.nyks.bridge.QueryRegisteredJudgesRequest")
	proto.RegisterType((*QueryRegisteredJudgesResponse)(nil), "twilightproject.nyks.bridge.QueryRegisteredJudgesResponse")
	proto.RegisterType((*QueryWithdrawBtcRequestAllRequest)(nil), "twilightproject.nyks.bridge.QueryWithdrawBtcRequestAllRequest")
	proto.RegisterType((*QueryWithdrawBtcRequestAllResponse)(nil), "twilightproject.nyks.bridge.QueryWithdrawBtcRequestAllResponse")
}

func init() { proto.RegisterFile("nyks/bridge/query.proto", fileDescriptor_8482370855e6a811) }

var fileDescriptor_8482370855e6a811 = []byte{
	// 909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xd1, 0x6f, 0xdb, 0x54,
	0x14, 0xc6, 0x73, 0x33, 0x08, 0xda, 0x19, 0x62, 0xd3, 0xa5, 0x40, 0xe4, 0x6d, 0x61, 0x78, 0xa8,
	0x84, 0xb2, 0xc5, 0x34, 0x40, 0x59, 0x27, 0x54, 0x68, 0x28, 0x43, 0x80, 0x26, 0x68, 0xc4, 0x06,
	0x9a, 0x04, 0xc1, 0x8e, 0x2f, 0xae, 0x5b, 0x37, 0x76, 0x7d, 0x6f, 0xda, 0x46, 0xa8, 0x0f, 0x20,
	0x21, 0x21, 0x78, 0x41, 0xe2, 0x09, 0xf1, 0xc4, 0x9f, 0xc1, 0x13, 0x12, 0x4f, 0x7d, 0xac, 0xc4,
	0x4b, 0x9f, 0x10, 0x6a, 0x79, 0xe3, 0x1f, 0xe0, 0x11, 0xe5, 0xfa, 0xd8, 0x4d, 0xec, 0xd8, 0x71,
	0x9a, 0x6a, 0x6f, 0xdb, 0xb9, 0xe7, 0x7c, 0xf7, 0xf7, 0x1d, 0xd7, 0xfe, 0x14, 0x78, 0xa6, 0xd3,
	0xdb, 0xe0, 0x9a, 0xe1, 0xdb, 0xa6, 0xc5, 0xb4, 0xad, 0x2e, 0xf3, 0x7b, 0x35, 0xcf, 0x77, 0x85,
	0x4b, 0x2f, 0x8b, 0x1d, 0xdb, 0xb1, 0xad, 0x35, 0xe1, 0xf9, 0xee, 0x3a, 0x6b, 0x8b, 0x5a, 0xbf,
	0xb1, 0x16, 0x34, 0x2a, 0x33, 0x96, 0x6b, 0xb9, 0xb2, 0x4f, 0xeb, 0xff, 0x2b, 0x18, 0x51, 0xae,
	0x58, 0xae, 0x6b, 0x39, 0x4c, 0xd3, 0x3d, 0x5b, 0xd3, 0x3b, 0x1d, 0x57, 0xe8, 0xc2, 0x76, 0x3b,
	0x1c, 0x4f, 0xe7, 0xda, 0x2e, 0xdf, 0x74, 0xb9, 0x66, 0xe8, 0x1c, 0x6f, 0xd2, 0xb6, 0xe7, 0x0d,
	0x26, 0xf4, 0x79, 0xcd, 0xd3, 0x2d, 0xbb, 0x23, 0x9b, 0xb1, 0x77, 0x66, 0x90, 0x4a, 0xec, 0x62,
	0xb5, 0x3c, 0x58, 0xf5, 0x74, 0x5f, 0xdf, 0x44, 0x6d, 0x75, 0x06, 0xe8, 0x6a, 0x5f, 0xf1, 0x23,
	0x59, 0x6c, 0xb2, 0xad, 0x2e, 0xe3, 0x42, 0xfd, 0x14, 0x9e, 0x1c, 0xaa, 0x72, 0xcf, 0xed, 0x70,
	0x46, 0x97, 0xa1, 0x14, 0x0c, 0x97, 0xc9, 0x35, 0x52, 0xbd, 0x50, 0xbf, 0x5e, 0xcb, 0xb0, 0x5a,
	0x0b, 0x86, 0x1b, 0x8f, 0xec, 0xff, 0xf5, 0x6c, 0xa1, 0x89, 0x83, 0xea, 0x4b, 0xf0, 0xa2, 0x54,
	0x6e, 0x32, 0xcb, 0xe6, 0x82, 0xf9, 0xcc, 0x6c, 0x88, 0xf6, 0x0a, 0xf3, 0x5c, 0x6e, 0x8b, 0x65,
	0xd3, 0xf4, 0x19, 0xe7, 0x2c, 0xc2, 0xf8, 0x81, 0xc0, 0x5c, 0x9e, 0x6e, 0xc4, 0xfb, 0x0c, 0xce,
	0xeb, 0x61, 0xb1, 0x4c, 0xae, 0x9d, 0xab, 0x5e, 0xa8, 0x2f, 0x66, 0x12, 0xde, 0xe5, 0x56, 0xa8,
	0x9c, 0xd0, 0x45, 0xee, 0x13, 0x45, 0xb5, 0x0a, 0xb3, 0x31, 0x98, 0x26, 0xe3, 0xcc, 0xdf, 0x66,
	0x09, 0xee, 0x6f, 0x09, 0xbc, 0x30, 0xb6, 0x15, 0xa1, 0x1f, 0x24, 0xa1, 0x17, 0xf2, 0x42, 0x0f,
	0x8b, 0x26, 0x89, 0x57, 0x13, 0x18, 0x09, 0x9b, 0x88, 0x4c, 0x67, 0xe1, 0x09, 0x73, 0xe8, 0x40,
	0x3e, 0xe2, 0xf3, 0xcd, 0x58, 0x55, 0xfd, 0x9e, 0x40, 0x75, 0xbc, 0x26, 0x7a, 0xcb, 0x29, 0x4a,
	0x17, 0xe0, 0xe9, 0xd0, 0xf1, 0xb0, 0x52, 0xb9, 0x28, 0xfb, 0x53, 0x4e, 0x55, 0x1f, 0x6e, 0x8d,
	0x63, 0x69, 0xf4, 0x3e, 0xc6, 0xd9, 0x98, 0xe1, 0xf4, 0x3b, 0x49, 0xe6, 0x9d, 0xbf, 0x10, 0x58,
	0x3c, 0xc5, 0xa5, 0x0f, 0x69, 0x23, 0x06, 0xbc, 0x1a, 0x83, 0x7b, 0xbf, 0x6b, 0x5a, 0xd1, 0x5f,
	0x48, 0xef, 0xbe, 0xee, 0xd8, 0xa6, 0x2e, 0x5c, 0x3f, 0xb6, 0x8d, 0x39, 0xb8, 0xb4, 0x1d, 0x3b,
	0x42, 0xb2, 0x44, 0x5d, 0xfd, 0x95, 0xc0, 0x6b, 0x13, 0x5e, 0x82, 0xee, 0xcb, 0xf0, 0x58, 0xdb,
	0x67, 0xfd, 0x13, 0x14, 0x0f, 0xff, 0x4b, 0x55, 0x78, 0x7c, 0x7d, 0x40, 0x03, 0x5d, 0x0e, 0xd5,
	0x46, 0x32, 0x9e, 0x4b, 0x61, 0xac, 0xc0, 0x95, 0x51, 0x88, 0xd1, 0x1b, 0xea, 0xc0, 0xd5, 0x94,
	0x73, 0x44, 0xfd, 0x00, 0x4a, 0x41, 0x05, 0xdf, 0xc9, 0x9b, 0x79, 0xdf, 0x49, 0x39, 0x15, 0x7e,
	0xf4, 0x02, 0x09, 0xf5, 0x3a, 0x3c, 0x27, 0x6f, 0xfb, 0xc4, 0x16, 0x6b, 0xa6, 0xaf, 0xef, 0x34,
	0x44, 0x1b, 0x41, 0x96, 0x1d, 0x27, 0x44, 0xfa, 0x8e, 0x80, 0x9a, 0xd5, 0x85, 0x60, 0x06, 0x5c,
	0xdc, 0xc1, 0x06, 0x3c, 0x45, 0xc2, 0xfa, 0x38, 0xc2, 0xa4, 0x2e, 0x62, 0xc6, 0x05, 0xeb, 0xbf,
	0x5f, 0x84, 0x47, 0x25, 0x0a, 0xfd, 0x99, 0x40, 0x29, 0xf8, 0x8e, 0x53, 0x2d, 0x53, 0x3f, 0x19,
	0x22, 0xca, 0xcb, 0xf9, 0x07, 0x02, 0x6f, 0xea, 0x8d, 0x6f, 0xfe, 0xfc, 0xe7, 0xa7, 0xe2, 0x2c,
	0x7d, 0x5e, 0x0b, 0x27, 0x6f, 0xe2, 0xa8, 0x96, 0x0c, 0x30, 0xfa, 0x1f, 0x81, 0xab, 0x99, 0xc1,
	0x40, 0xef, 0x8c, 0x27, 0xc8, 0x93, 0x43, 0xca, 0xbb, 0x53, 0xeb, 0xa0, 0xc1, 0x3b, 0xd2, 0xe0,
	0x5b, 0x74, 0x29, 0xdb, 0xa0, 0x1f, 0x89, 0xb5, 0x0c, 0xd1, 0x6e, 0xe1, 0xb7, 0xa1, 0x15, 0x7d,
	0xd8, 0xe9, 0xbf, 0x04, 0x94, 0xf4, 0x6c, 0xa1, 0x6f, 0x4f, 0xc2, 0x9b, 0x12, 0x62, 0xca, 0xca,
	0x74, 0x22, 0xe8, 0xb8, 0x21, 0x1d, 0xbf, 0x41, 0x6f, 0xe7, 0x76, 0xec, 0x07, 0x52, 0x03, 0x6e,
	0xbf, 0x2e, 0xc2, 0xe5, 0x8c, 0xfd, 0xd2, 0x95, 0xa9, 0x1e, 0x4f, 0xe8, 0xf7, 0x9d, 0x29, 0x55,
	0xd0, 0xf0, 0x3d, 0x69, 0xf8, 0x43, 0x7a, 0x77, 0x9a, 0x47, 0xac, 0x7d, 0x35, 0x9c, 0x07, 0x7b,
	0xf4, 0xa0, 0x08, 0x37, 0x26, 0x49, 0x1c, 0x7a, 0x6f, 0x2a, 0x3b, 0x69, 0xb1, 0xa9, 0xdc, 0x3f,
	0x6b, 0x59, 0x5c, 0xdb, 0x96, 0x5c, 0xdb, 0x06, 0xb5, 0xa7, 0x59, 0x5b, 0xcb, 0xe8, 0xb5, 0xc2,
	0xf1, 0x93, 0x55, 0x8e, 0x8e, 0xca, 0x3d, 0xfa, 0x5b, 0x11, 0xaa, 0x79, 0x23, 0x8c, 0xae, 0x4e,
	0xe2, 0x3b, 0x57, 0xe6, 0x2a, 0xcd, 0xb3, 0x94, 0xc4, 0x35, 0x7e, 0x29, 0xd7, 0xf8, 0x05, 0xfd,
	0x3c, 0xf7, 0x1a, 0x65, 0xc4, 0x0e, 0x2e, 0x30, 0xca, 0xd2, 0x93, 0x0d, 0xc6, 0xe3, 0x75, 0x8f,
	0xfe, 0x41, 0xe0, 0x52, 0x3c, 0x3b, 0xe9, 0xe2, 0xc4, 0x86, 0xa2, 0x5d, 0xdc, 0x3e, 0xcd, 0x28,
	0x7a, 0x7e, 0x5d, 0x7a, 0x9e, 0xa7, 0xda, 0x64, 0x9e, 0x39, 0x3d, 0x24, 0xf0, 0xd4, 0xc8, 0xb0,
	0xa5, 0x4b, 0xe3, 0x71, 0xb2, 0xb2, 0x5c, 0x79, 0xf3, 0xd4, 0xf3, 0xe8, 0x69, 0x49, 0x7a, 0xba,
	0x45, 0x17, 0xb2, 0x3d, 0x85, 0xc1, 0x2d, 0x5f, 0x06, 0x3f, 0x90, 0x69, 0xe9, 0x8e, 0xd3, 0x78,
	0x6f, 0xff, 0xa8, 0x42, 0x0e, 0x8e, 0x2a, 0xe4, 0xef, 0xa3, 0x0a, 0xf9, 0xf1, 0xb8, 0x52, 0x38,
	0x38, 0xae, 0x14, 0x0e, 0x8f, 0x2b, 0x85, 0x07, 0x9a, 0x65, 0x8b, 0xb5, 0xae, 0x51, 0x6b, 0xbb,
	0x9b, 0x29, 0xda, 0xbb, 0xd1, 0xcf, 0xc7, 0x9e, 0xc7, 0xb8, 0x51, 0x92, 0x3f, 0x14, 0x5f, 0xf9,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xb3, 0xa8, 0xc6, 0xf0, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of RegisteredBtcDepositAddresses items.
	RegisteredBtcDepositAddresses(ctx context.Context, in *QueryRegisteredBtcDepositAddressesRequest, opts ...grpc.CallOption) (*QueryRegisteredBtcDepositAddressesResponse, error)
	// Queries a list of RegisteredReserveAddresses items.
	RegisteredReserveAddresses(ctx context.Context, in *QueryRegisteredReserveAddressesRequest, opts ...grpc.CallOption) (*QueryRegisteredReserveAddressesResponse, error)
	// Queries a list of RegisteredBtcDepositAddress items.
	RegisteredBtcDepositAddress(ctx context.Context, in *QueryRegisteredBtcDepositAddressRequest, opts ...grpc.CallOption) (*QueryRegisteredBtcDepositAddressResponse, error)
	// Queries a list of RegisteredBtcDepositAddressByTwilightAddress items.
	RegisteredBtcDepositAddressByTwilightAddress(ctx context.Context, in *QueryRegisteredBtcDepositAddressByTwilightAddressRequest, opts ...grpc.CallOption) (*QueryRegisteredBtcDepositAddressByTwilightAddressResponse, error)
	// Queries a list of RegisteredJudgeAddressByValidatorAddress items.
	RegisteredJudgeAddressByValidatorAddress(ctx context.Context, in *QueryRegisteredJudgeAddressByValidatorAddressRequest, opts ...grpc.CallOption) (*QueryRegisteredJudgeAddressByValidatorAddressResponse, error)
	// Queries a list of RegisteredJudges items.
	RegisteredJudges(ctx context.Context, in *QueryRegisteredJudgesRequest, opts ...grpc.CallOption) (*QueryRegisteredJudgesResponse, error)
	// Queries a list of WithdrawBtcRequestAll items.
	WithdrawBtcRequestAll(ctx context.Context, in *QueryWithdrawBtcRequestAllRequest, opts ...grpc.CallOption) (*QueryWithdrawBtcRequestAllResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredBtcDepositAddresses(ctx context.Context, in *QueryRegisteredBtcDepositAddressesRequest, opts ...grpc.CallOption) (*QueryRegisteredBtcDepositAddressesResponse, error) {
	out := new(QueryRegisteredBtcDepositAddressesResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/RegisteredBtcDepositAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredReserveAddresses(ctx context.Context, in *QueryRegisteredReserveAddressesRequest, opts ...grpc.CallOption) (*QueryRegisteredReserveAddressesResponse, error) {
	out := new(QueryRegisteredReserveAddressesResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/RegisteredReserveAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredBtcDepositAddress(ctx context.Context, in *QueryRegisteredBtcDepositAddressRequest, opts ...grpc.CallOption) (*QueryRegisteredBtcDepositAddressResponse, error) {
	out := new(QueryRegisteredBtcDepositAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/RegisteredBtcDepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredBtcDepositAddressByTwilightAddress(ctx context.Context, in *QueryRegisteredBtcDepositAddressByTwilightAddressRequest, opts ...grpc.CallOption) (*QueryRegisteredBtcDepositAddressByTwilightAddressResponse, error) {
	out := new(QueryRegisteredBtcDepositAddressByTwilightAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/RegisteredBtcDepositAddressByTwilightAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredJudgeAddressByValidatorAddress(ctx context.Context, in *QueryRegisteredJudgeAddressByValidatorAddressRequest, opts ...grpc.CallOption) (*QueryRegisteredJudgeAddressByValidatorAddressResponse, error) {
	out := new(QueryRegisteredJudgeAddressByValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/RegisteredJudgeAddressByValidatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredJudges(ctx context.Context, in *QueryRegisteredJudgesRequest, opts ...grpc.CallOption) (*QueryRegisteredJudgesResponse, error) {
	out := new(QueryRegisteredJudgesResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/RegisteredJudges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawBtcRequestAll(ctx context.Context, in *QueryWithdrawBtcRequestAllRequest, opts ...grpc.CallOption) (*QueryWithdrawBtcRequestAllResponse, error) {
	out := new(QueryWithdrawBtcRequestAllResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Query/WithdrawBtcRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of RegisteredBtcDepositAddresses items.
	RegisteredBtcDepositAddresses(context.Context, *QueryRegisteredBtcDepositAddressesRequest) (*QueryRegisteredBtcDepositAddressesResponse, error)
	// Queries a list of RegisteredReserveAddresses items.
	RegisteredReserveAddresses(context.Context, *QueryRegisteredReserveAddressesRequest) (*QueryRegisteredReserveAddressesResponse, error)
	// Queries a list of RegisteredBtcDepositAddress items.
	RegisteredBtcDepositAddress(context.Context, *QueryRegisteredBtcDepositAddressRequest) (*QueryRegisteredBtcDepositAddressResponse, error)
	// Queries a list of RegisteredBtcDepositAddressByTwilightAddress items.
	RegisteredBtcDepositAddressByTwilightAddress(context.Context, *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) (*QueryRegisteredBtcDepositAddressByTwilightAddressResponse, error)
	// Queries a list of RegisteredJudgeAddressByValidatorAddress items.
	RegisteredJudgeAddressByValidatorAddress(context.Context, *QueryRegisteredJudgeAddressByValidatorAddressRequest) (*QueryRegisteredJudgeAddressByValidatorAddressResponse, error)
	// Queries a list of RegisteredJudges items.
	RegisteredJudges(context.Context, *QueryRegisteredJudgesRequest) (*QueryRegisteredJudgesResponse, error)
	// Queries a list of WithdrawBtcRequestAll items.
	WithdrawBtcRequestAll(context.Context, *QueryWithdrawBtcRequestAllRequest) (*QueryWithdrawBtcRequestAllResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RegisteredBtcDepositAddresses(ctx context.Context, req *QueryRegisteredBtcDepositAddressesRequest) (*QueryRegisteredBtcDepositAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredBtcDepositAddresses not implemented")
}
func (*UnimplementedQueryServer) RegisteredReserveAddresses(ctx context.Context, req *QueryRegisteredReserveAddressesRequest) (*QueryRegisteredReserveAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredReserveAddresses not implemented")
}
func (*UnimplementedQueryServer) RegisteredBtcDepositAddress(ctx context.Context, req *QueryRegisteredBtcDepositAddressRequest) (*QueryRegisteredBtcDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredBtcDepositAddress not implemented")
}
func (*UnimplementedQueryServer) RegisteredBtcDepositAddressByTwilightAddress(ctx context.Context, req *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) (*QueryRegisteredBtcDepositAddressByTwilightAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredBtcDepositAddressByTwilightAddress not implemented")
}
func (*UnimplementedQueryServer) RegisteredJudgeAddressByValidatorAddress(ctx context.Context, req *QueryRegisteredJudgeAddressByValidatorAddressRequest) (*QueryRegisteredJudgeAddressByValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredJudgeAddressByValidatorAddress not implemented")
}
func (*UnimplementedQueryServer) RegisteredJudges(ctx context.Context, req *QueryRegisteredJudgesRequest) (*QueryRegisteredJudgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredJudges not implemented")
}
func (*UnimplementedQueryServer) WithdrawBtcRequestAll(ctx context.Context, req *QueryWithdrawBtcRequestAllRequest) (*QueryWithdrawBtcRequestAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBtcRequestAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredBtcDepositAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredBtcDepositAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredBtcDepositAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/RegisteredBtcDepositAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredBtcDepositAddresses(ctx, req.(*QueryRegisteredBtcDepositAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredReserveAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredReserveAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredReserveAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/RegisteredReserveAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredReserveAddresses(ctx, req.(*QueryRegisteredReserveAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredBtcDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredBtcDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredBtcDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/RegisteredBtcDepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredBtcDepositAddress(ctx, req.(*QueryRegisteredBtcDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredBtcDepositAddressByTwilightAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredBtcDepositAddressByTwilightAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredBtcDepositAddressByTwilightAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/RegisteredBtcDepositAddressByTwilightAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredBtcDepositAddressByTwilightAddress(ctx, req.(*QueryRegisteredBtcDepositAddressByTwilightAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredJudgeAddressByValidatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredJudgeAddressByValidatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredJudgeAddressByValidatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/RegisteredJudgeAddressByValidatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredJudgeAddressByValidatorAddress(ctx, req.(*QueryRegisteredJudgeAddressByValidatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredJudges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredJudgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredJudges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/RegisteredJudges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredJudges(ctx, req.(*QueryRegisteredJudgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawBtcRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawBtcRequestAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawBtcRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Query/WithdrawBtcRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawBtcRequestAll(ctx, req.(*QueryWithdrawBtcRequestAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twilightproject.nyks.bridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RegisteredBtcDepositAddresses",
			Handler:    _Query_RegisteredBtcDepositAddresses_Handler,
		},
		{
			MethodName: "RegisteredReserveAddresses",
			Handler:    _Query_RegisteredReserveAddresses_Handler,
		},
		{
			MethodName: "RegisteredBtcDepositAddress",
			Handler:    _Query_RegisteredBtcDepositAddress_Handler,
		},
		{
			MethodName: "RegisteredBtcDepositAddressByTwilightAddress",
			Handler:    _Query_RegisteredBtcDepositAddressByTwilightAddress_Handler,
		},
		{
			MethodName: "RegisteredJudgeAddressByValidatorAddress",
			Handler:    _Query_RegisteredJudgeAddressByValidatorAddress_Handler,
		},
		{
			MethodName: "RegisteredJudges",
			Handler:    _Query_RegisteredJudges_Handler,
		},
		{
			MethodName: "WithdrawBtcRequestAll",
			Handler:    _Query_WithdrawBtcRequestAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nyks/bridge/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredBtcDepositAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredBtcDepositAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredBtcDepositAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredBtcDepositAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredBtcDepositAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredBtcDepositAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredReserveAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredReserveAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredReserveAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredReserveAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredReserveAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredReserveAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredBtcDepositAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredBtcDepositAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredBtcDepositAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredBtcDepositAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredBtcDepositAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredBtcDepositAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredJudgesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredJudgesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredJudgesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredJudgesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredJudgesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredJudgesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Judges) > 0 {
		for iNdEx := len(m.Judges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Judges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawBtcRequestAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawBtcRequestAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawBtcRequestAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawBtcRequestAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawBtcRequestAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawBtcRequestAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawRequest) > 0 {
		for iNdEx := len(m.WithdrawRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRegisteredBtcDepositAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredBtcDepositAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredReserveAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredReserveAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredBtcDepositAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredBtcDepositAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredJudgesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredJudgesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Judges) > 0 {
		for _, e := range m.Judges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWithdrawBtcRequestAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWithdrawBtcRequestAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawRequest) > 0 {
		for _, e := range m.WithdrawRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredBtcDepositAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredBtcDepositAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, MsgRegisterBtcDepositAddress{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredReserveAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredReserveAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredReserveAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredReserveAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredReserveAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredReserveAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, MsgRegisterReserveAddress{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredBtcDepositAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredBtcDepositAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressByTwilightAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressByTwilightAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredBtcDepositAddressByTwilightAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressByTwilightAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredBtcDepositAddressByTwilightAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredJudgeAddressByValidatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredJudgeAddressByValidatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredJudgeAddressByValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredJudgeAddressByValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredJudgeAddressByValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredJudgesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredJudgesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredJudgesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredJudgesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredJudgesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredJudgesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Judges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Judges = append(m.Judges, MsgRegisterJudge{})
			if err := m.Judges[len(m.Judges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawBtcRequestAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawBtcRequestAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawBtcRequestAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawBtcRequestAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawBtcRequestAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawBtcRequestAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawRequest = append(m.WithdrawRequest, MsgWithdrawBtcRequest{})
			if err := m.WithdrawRequest[len(m.WithdrawRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
