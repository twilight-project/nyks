// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/bridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/twilight-project/nyks/x/volt/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgConfirmBtcDeposit struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	DepositAmount          uint64 `protobuf:"varint,2,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`
	Height                 uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Hash                   string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,5,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
	ReserveAddress         string `protobuf:"bytes,6,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	OracleAddress          string `protobuf:"bytes,7,opt,name=oracleAddress,proto3" json:"oracleAddress,omitempty"`
}

func (m *MsgConfirmBtcDeposit) Reset()         { *m = MsgConfirmBtcDeposit{} }
func (m *MsgConfirmBtcDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcDeposit) ProtoMessage()    {}
func (*MsgConfirmBtcDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{0}
}
func (m *MsgConfirmBtcDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcDeposit.Merge(m, src)
}
func (m *MsgConfirmBtcDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcDeposit proto.InternalMessageInfo

func (m *MsgConfirmBtcDeposit) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetDepositAmount() uint64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *MsgConfirmBtcDeposit) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgConfirmBtcDeposit) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

type MsgConfirmBtcDepositResponse struct {
	TwilightDepositAddress string `protobuf:"bytes,1,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *MsgConfirmBtcDepositResponse) Reset()         { *m = MsgConfirmBtcDepositResponse{} }
func (m *MsgConfirmBtcDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcDepositResponse) ProtoMessage()    {}
func (*MsgConfirmBtcDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{1}
}
func (m *MsgConfirmBtcDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcDepositResponse.Merge(m, src)
}
func (m *MsgConfirmBtcDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcDepositResponse proto.InternalMessageInfo

func (m *MsgConfirmBtcDepositResponse) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

type MsgRegisterBtcDepositAddress struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,2,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *MsgRegisterBtcDepositAddress) Reset()         { *m = MsgRegisterBtcDepositAddress{} }
func (m *MsgRegisterBtcDepositAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBtcDepositAddress) ProtoMessage()    {}
func (*MsgRegisterBtcDepositAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{2}
}
func (m *MsgRegisterBtcDepositAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBtcDepositAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBtcDepositAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBtcDepositAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBtcDepositAddress.Merge(m, src)
}
func (m *MsgRegisterBtcDepositAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBtcDepositAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBtcDepositAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBtcDepositAddress proto.InternalMessageInfo

func (m *MsgRegisterBtcDepositAddress) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *MsgRegisterBtcDepositAddress) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

type MsgRegisterBtcDepositAddressResponse struct {
}

func (m *MsgRegisterBtcDepositAddressResponse) Reset()         { *m = MsgRegisterBtcDepositAddressResponse{} }
func (m *MsgRegisterBtcDepositAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBtcDepositAddressResponse) ProtoMessage()    {}
func (*MsgRegisterBtcDepositAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{3}
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBtcDepositAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBtcDepositAddressResponse.Merge(m, src)
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBtcDepositAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBtcDepositAddressResponse proto.InternalMessageInfo

type MsgRegisterReserveAddress struct {
	ReserveScript  string `protobuf:"bytes,1,opt,name=reserveScript,proto3" json:"reserveScript,omitempty"`
	ReserveAddress string `protobuf:"bytes,2,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	JudgeAddress   string `protobuf:"bytes,3,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgRegisterReserveAddress) Reset()         { *m = MsgRegisterReserveAddress{} }
func (m *MsgRegisterReserveAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterReserveAddress) ProtoMessage()    {}
func (*MsgRegisterReserveAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{4}
}
func (m *MsgRegisterReserveAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterReserveAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterReserveAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterReserveAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterReserveAddress.Merge(m, src)
}
func (m *MsgRegisterReserveAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterReserveAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterReserveAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterReserveAddress proto.InternalMessageInfo

func (m *MsgRegisterReserveAddress) GetReserveScript() string {
	if m != nil {
		return m.ReserveScript
	}
	return ""
}

func (m *MsgRegisterReserveAddress) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgRegisterReserveAddress) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgRegisterReserveAddressResponse struct {
	ReserveAddress string `protobuf:"bytes,1,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
}

func (m *MsgRegisterReserveAddressResponse) Reset()         { *m = MsgRegisterReserveAddressResponse{} }
func (m *MsgRegisterReserveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterReserveAddressResponse) ProtoMessage()    {}
func (*MsgRegisterReserveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{5}
}
func (m *MsgRegisterReserveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterReserveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterReserveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterReserveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterReserveAddressResponse.Merge(m, src)
}
func (m *MsgRegisterReserveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterReserveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterReserveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterReserveAddressResponse proto.InternalMessageInfo

func (m *MsgRegisterReserveAddressResponse) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

type MsgRegisterJudge struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JudgeAddress     string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *MsgRegisterJudge) Reset()         { *m = MsgRegisterJudge{} }
func (m *MsgRegisterJudge) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterJudge) ProtoMessage()    {}
func (*MsgRegisterJudge) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{6}
}
func (m *MsgRegisterJudge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterJudge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterJudge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterJudge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterJudge.Merge(m, src)
}
func (m *MsgRegisterJudge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterJudge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterJudge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterJudge proto.InternalMessageInfo

func (m *MsgRegisterJudge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterJudge) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *MsgRegisterJudge) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type MsgRegisterJudgeResponse struct {
}

func (m *MsgRegisterJudgeResponse) Reset()         { *m = MsgRegisterJudgeResponse{} }
func (m *MsgRegisterJudgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterJudgeResponse) ProtoMessage()    {}
func (*MsgRegisterJudgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{7}
}
func (m *MsgRegisterJudgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterJudgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterJudgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterJudgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterJudgeResponse.Merge(m, src)
}
func (m *MsgRegisterJudgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterJudgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterJudgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterJudgeResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgWithdrawRequest struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TwilightAddress string `protobuf:"bytes,2,opt,name=twilightAddress,proto3" json:"twilightAddress,omitempty"`
	WithdrawAddress string `protobuf:"bytes,3,opt,name=withdrawAddress,proto3" json:"withdrawAddress,omitempty"`
	ReserveId       uint64 `protobuf:"varint,4,opt,name=reserveId,proto3" json:"reserveId,omitempty"`
	WithdrawAmount  uint64 `protobuf:"varint,5,opt,name=withdrawAmount,proto3" json:"withdrawAmount,omitempty"`
}

func (m *MsgWithdrawRequest) Reset()         { *m = MsgWithdrawRequest{} }
func (m *MsgWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRequest) ProtoMessage()    {}
func (*MsgWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{8}
}
func (m *MsgWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRequest.Merge(m, src)
}
func (m *MsgWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRequest proto.InternalMessageInfo

func (m *MsgWithdrawRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawRequest) GetTwilightAddress() string {
	if m != nil {
		return m.TwilightAddress
	}
	return ""
}

func (m *MsgWithdrawRequest) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

func (m *MsgWithdrawRequest) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *MsgWithdrawRequest) GetWithdrawAmount() uint64 {
	if m != nil {
		return m.WithdrawAmount
	}
	return 0
}

type MsgWithdrawRequestResponse struct {
}

func (m *MsgWithdrawRequestResponse) Reset()         { *m = MsgWithdrawRequestResponse{} }
func (m *MsgWithdrawRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRequestResponse) ProtoMessage()    {}
func (*MsgWithdrawRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{9}
}
func (m *MsgWithdrawRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRequestResponse.Merge(m, src)
}
func (m *MsgWithdrawRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRequestResponse proto.InternalMessageInfo

type MsgSweepProposal struct {
	Creator                          string                                    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReserveId                        uint64                                    `protobuf:"varint,2,opt,name=reserveId,proto3" json:"reserveId,omitempty"`
	ReserveAddress                   string                                    `protobuf:"bytes,3,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	JudgeAddress                     string                                    `protobuf:"bytes,4,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	BtcRelayCapacityValue            uint64                                    `protobuf:"varint,5,opt,name=btcRelayCapacityValue,proto3" json:"btcRelayCapacityValue,omitempty"`
	TotalValue                       uint64                                    `protobuf:"varint,6,opt,name=totalValue,proto3" json:"totalValue,omitempty"`
	PrivatePoolValue                 uint64                                    `protobuf:"varint,7,opt,name=privatePoolValue,proto3" json:"privatePoolValue,omitempty"`
	PublicValue                      uint64                                    `protobuf:"varint,8,opt,name=publicValue,proto3" json:"publicValue,omitempty"`
	FeePool                          uint64                                    `protobuf:"varint,9,opt,name=feePool,proto3" json:"feePool,omitempty"`
	IndividualTwilightReserveAccount []*types.IndividualTwilightReserveAccount `protobuf:"bytes,10,rep,name=individualTwilightReserveAccount,proto3" json:"individualTwilightReserveAccount,omitempty"`
	BtcRefundTx                      string                                    `protobuf:"bytes,11,opt,name=btcRefundTx,proto3" json:"btcRefundTx,omitempty"`
	BtcSweepTx                       string                                    `protobuf:"bytes,12,opt,name=btcSweepTx,proto3" json:"btcSweepTx,omitempty"`
}

func (m *MsgSweepProposal) Reset()         { *m = MsgSweepProposal{} }
func (m *MsgSweepProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSweepProposal) ProtoMessage()    {}
func (*MsgSweepProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{10}
}
func (m *MsgSweepProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSweepProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSweepProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSweepProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSweepProposal.Merge(m, src)
}
func (m *MsgSweepProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSweepProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSweepProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSweepProposal proto.InternalMessageInfo

func (m *MsgSweepProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSweepProposal) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *MsgSweepProposal) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgSweepProposal) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *MsgSweepProposal) GetBtcRelayCapacityValue() uint64 {
	if m != nil {
		return m.BtcRelayCapacityValue
	}
	return 0
}

func (m *MsgSweepProposal) GetTotalValue() uint64 {
	if m != nil {
		return m.TotalValue
	}
	return 0
}

func (m *MsgSweepProposal) GetPrivatePoolValue() uint64 {
	if m != nil {
		return m.PrivatePoolValue
	}
	return 0
}

func (m *MsgSweepProposal) GetPublicValue() uint64 {
	if m != nil {
		return m.PublicValue
	}
	return 0
}

func (m *MsgSweepProposal) GetFeePool() uint64 {
	if m != nil {
		return m.FeePool
	}
	return 0
}

func (m *MsgSweepProposal) GetIndividualTwilightReserveAccount() []*types.IndividualTwilightReserveAccount {
	if m != nil {
		return m.IndividualTwilightReserveAccount
	}
	return nil
}

func (m *MsgSweepProposal) GetBtcRefundTx() string {
	if m != nil {
		return m.BtcRefundTx
	}
	return ""
}

func (m *MsgSweepProposal) GetBtcSweepTx() string {
	if m != nil {
		return m.BtcSweepTx
	}
	return ""
}

type MsgSweepProposalResponse struct {
}

func (m *MsgSweepProposalResponse) Reset()         { *m = MsgSweepProposalResponse{} }
func (m *MsgSweepProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSweepProposalResponse) ProtoMessage()    {}
func (*MsgSweepProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{11}
}
func (m *MsgSweepProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSweepProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSweepProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSweepProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSweepProposalResponse.Merge(m, src)
}
func (m *MsgSweepProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSweepProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSweepProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSweepProposalResponse proto.InternalMessageInfo

type MsgWithdrawTxSigned struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	BtcTxSigned      string `protobuf:"bytes,3,opt,name=btcTxSigned,proto3" json:"btcTxSigned,omitempty"`
}

func (m *MsgWithdrawTxSigned) Reset()         { *m = MsgWithdrawTxSigned{} }
func (m *MsgWithdrawTxSigned) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxSigned) ProtoMessage()    {}
func (*MsgWithdrawTxSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{12}
}
func (m *MsgWithdrawTxSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxSigned.Merge(m, src)
}
func (m *MsgWithdrawTxSigned) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxSigned.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxSigned proto.InternalMessageInfo

func (m *MsgWithdrawTxSigned) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawTxSigned) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgWithdrawTxSigned) GetBtcTxSigned() string {
	if m != nil {
		return m.BtcTxSigned
	}
	return ""
}

type MsgWithdrawTxSignedResponse struct {
}

func (m *MsgWithdrawTxSignedResponse) Reset()         { *m = MsgWithdrawTxSignedResponse{} }
func (m *MsgWithdrawTxSignedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxSignedResponse) ProtoMessage()    {}
func (*MsgWithdrawTxSignedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{13}
}
func (m *MsgWithdrawTxSignedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxSignedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxSignedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxSignedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxSignedResponse.Merge(m, src)
}
func (m *MsgWithdrawTxSignedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxSignedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxSignedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxSignedResponse proto.InternalMessageInfo

type MsgWithdrawTxFinal struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JudgeAddress string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	BtcTx        string `protobuf:"bytes,3,opt,name=btcTx,proto3" json:"btcTx,omitempty"`
}

func (m *MsgWithdrawTxFinal) Reset()         { *m = MsgWithdrawTxFinal{} }
func (m *MsgWithdrawTxFinal) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxFinal) ProtoMessage()    {}
func (*MsgWithdrawTxFinal) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{14}
}
func (m *MsgWithdrawTxFinal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxFinal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxFinal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxFinal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxFinal.Merge(m, src)
}
func (m *MsgWithdrawTxFinal) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxFinal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxFinal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxFinal proto.InternalMessageInfo

func (m *MsgWithdrawTxFinal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawTxFinal) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *MsgWithdrawTxFinal) GetBtcTx() string {
	if m != nil {
		return m.BtcTx
	}
	return ""
}

type MsgWithdrawTxFinalResponse struct {
}

func (m *MsgWithdrawTxFinalResponse) Reset()         { *m = MsgWithdrawTxFinalResponse{} }
func (m *MsgWithdrawTxFinalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxFinalResponse) ProtoMessage()    {}
func (*MsgWithdrawTxFinalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{15}
}
func (m *MsgWithdrawTxFinalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxFinalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxFinalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxFinalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxFinalResponse.Merge(m, src)
}
func (m *MsgWithdrawTxFinalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxFinalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxFinalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxFinalResponse proto.InternalMessageInfo

type MsgConfirmBtcWithdraw struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	TxHash           string `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (m *MsgConfirmBtcWithdraw) Reset()         { *m = MsgConfirmBtcWithdraw{} }
func (m *MsgConfirmBtcWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcWithdraw) ProtoMessage()    {}
func (*MsgConfirmBtcWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{16}
}
func (m *MsgConfirmBtcWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcWithdraw.Merge(m, src)
}
func (m *MsgConfirmBtcWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcWithdraw proto.InternalMessageInfo

func (m *MsgConfirmBtcWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgConfirmBtcWithdraw) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgConfirmBtcWithdraw) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type MsgConfirmBtcWithdrawResponse struct {
}

func (m *MsgConfirmBtcWithdrawResponse) Reset()         { *m = MsgConfirmBtcWithdrawResponse{} }
func (m *MsgConfirmBtcWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcWithdrawResponse) ProtoMessage()    {}
func (*MsgConfirmBtcWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{17}
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcWithdrawResponse.Merge(m, src)
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcWithdrawResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgConfirmBtcDeposit)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcDeposit")
	proto.RegisterType((*MsgConfirmBtcDepositResponse)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcDepositResponse")
	proto.RegisterType((*MsgRegisterBtcDepositAddress)(nil), "twilightproject.nyks.bridge.MsgRegisterBtcDepositAddress")
	proto.RegisterType((*MsgRegisterBtcDepositAddressResponse)(nil), "twilightproject.nyks.bridge.MsgRegisterBtcDepositAddressResponse")
	proto.RegisterType((*MsgRegisterReserveAddress)(nil), "twilightproject.nyks.bridge.MsgRegisterReserveAddress")
	proto.RegisterType((*MsgRegisterReserveAddressResponse)(nil), "twilightproject.nyks.bridge.MsgRegisterReserveAddressResponse")
	proto.RegisterType((*MsgRegisterJudge)(nil), "twilightproject.nyks.bridge.MsgRegisterJudge")
	proto.RegisterType((*MsgRegisterJudgeResponse)(nil), "twilightproject.nyks.bridge.MsgRegisterJudgeResponse")
	proto.RegisterType((*MsgWithdrawRequest)(nil), "twilightproject.nyks.bridge.MsgWithdrawRequest")
	proto.RegisterType((*MsgWithdrawRequestResponse)(nil), "twilightproject.nyks.bridge.MsgWithdrawRequestResponse")
	proto.RegisterType((*MsgSweepProposal)(nil), "twilightproject.nyks.bridge.MsgSweepProposal")
	proto.RegisterType((*MsgSweepProposalResponse)(nil), "twilightproject.nyks.bridge.MsgSweepProposalResponse")
	proto.RegisterType((*MsgWithdrawTxSigned)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxSigned")
	proto.RegisterType((*MsgWithdrawTxSignedResponse)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxSignedResponse")
	proto.RegisterType((*MsgWithdrawTxFinal)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxFinal")
	proto.RegisterType((*MsgWithdrawTxFinalResponse)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxFinalResponse")
	proto.RegisterType((*MsgConfirmBtcWithdraw)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcWithdraw")
	proto.RegisterType((*MsgConfirmBtcWithdrawResponse)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcWithdrawResponse")
}

func init() { proto.RegisterFile("nyks/bridge/tx.proto", fileDescriptor_db8902f9254d7124) }

var fileDescriptor_db8902f9254d7124 = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x6f, 0xdb, 0x54,
	0x14, 0xae, 0x93, 0x34, 0xa5, 0xa7, 0x1b, 0x2b, 0x97, 0xae, 0x78, 0x5e, 0x17, 0x82, 0x35, 0x4d,
	0x15, 0xd2, 0x12, 0x28, 0x30, 0x7e, 0x49, 0x48, 0xfb, 0x21, 0x44, 0x41, 0x95, 0x26, 0x37, 0x1a,
	0x12, 0x6f, 0x8e, 0x7d, 0xeb, 0xdc, 0xe1, 0xda, 0xc6, 0xbe, 0x4e, 0x13, 0x01, 0x93, 0x90, 0x90,
	0x78, 0x42, 0xda, 0x13, 0x12, 0x6f, 0xbc, 0xf1, 0xaf, 0xec, 0x71, 0x8f, 0x3c, 0xa2, 0xf6, 0x1f,
	0x41, 0xbe, 0xbe, 0xf6, 0x7c, 0xed, 0x1b, 0xc7, 0xa9, 0x78, 0x8b, 0x8f, 0xbf, 0xef, 0x9c, 0xef,
	0x9c, 0x7b, 0xce, 0x3d, 0x31, 0xec, 0x78, 0xf3, 0xef, 0xa3, 0xe1, 0x38, 0x24, 0xb6, 0x83, 0x87,
	0x74, 0x36, 0x08, 0x42, 0x9f, 0xfa, 0xe8, 0x26, 0x3d, 0x23, 0x2e, 0x71, 0x26, 0x34, 0x08, 0xfd,
	0xa7, 0xd8, 0xa2, 0x83, 0x04, 0x35, 0x48, 0x51, 0xda, 0x5b, 0x8c, 0x32, 0xf5, 0x5d, 0x3a, 0x0c,
	0x71, 0x84, 0xc3, 0x29, 0x4e, 0x59, 0xfa, 0x1f, 0x2d, 0xd8, 0x39, 0x8a, 0x9c, 0x87, 0xbe, 0x77,
	0x42, 0xc2, 0xd3, 0x07, 0xd4, 0x7a, 0x84, 0x03, 0x3f, 0x22, 0x14, 0xdd, 0x81, 0xd7, 0xed, 0xf4,
	0xe7, 0x7d, 0xdb, 0x0e, 0x71, 0x14, 0xa9, 0x4a, 0x5f, 0xd9, 0xdf, 0x34, 0x4a, 0x56, 0x74, 0x1b,
	0xae, 0x66, 0x96, 0x53, 0x3f, 0xf6, 0xa8, 0xda, 0xea, 0x2b, 0xfb, 0x1d, 0x43, 0x34, 0xa2, 0x5d,
	0xe8, 0x4e, 0x70, 0x22, 0x4e, 0x6d, 0xb3, 0xd7, 0xfc, 0x09, 0x21, 0xe8, 0x4c, 0xcc, 0x68, 0xa2,
	0x76, 0x98, 0x6f, 0xf6, 0x1b, 0xdd, 0x83, 0xdd, 0x2c, 0x95, 0x47, 0xa2, 0x82, 0x75, 0x86, 0x5a,
	0xf0, 0x36, 0x51, 0xcc, 0x73, 0xcb, 0xf0, 0xdd, 0x54, 0xb1, 0x68, 0x4d, 0x14, 0xfb, 0xa1, 0x69,
	0xb9, 0x39, 0x6c, 0x83, 0xc1, 0x44, 0xa3, 0xfe, 0x04, 0xf6, 0x64, 0x75, 0x31, 0x70, 0x14, 0xf8,
	0x5e, 0x84, 0x6b, 0x54, 0x2a, 0x75, 0x2a, 0xf5, 0x67, 0xcc, 0xaf, 0x81, 0x1d, 0x12, 0x51, 0x1c,
	0xbe, 0x72, 0x5c, 0xc8, 0xa2, 0x51, 0xdd, 0x17, 0xc7, 0x6f, 0xd5, 0xc6, 0xbf, 0x03, 0xb7, 0xeb,
	0xe2, 0x67, 0xf9, 0xe9, 0xbf, 0x2b, 0x70, 0xa3, 0x00, 0x34, 0x2a, 0x35, 0xe4, 0x55, 0x3d, 0xb6,
	0x42, 0x12, 0x50, 0x2e, 0x52, 0x34, 0x4a, 0x4e, 0xa4, 0x25, 0x3d, 0x11, 0x1d, 0xae, 0x3c, 0x8d,
	0x6d, 0x27, 0x47, 0xb5, 0x19, 0x4a, 0xb0, 0xe9, 0xdf, 0xc0, 0x3b, 0x0b, 0xe5, 0xe4, 0x87, 0x52,
	0x0d, 0xa8, 0xc8, 0x02, 0xea, 0x3f, 0xc1, 0x76, 0xc1, 0xd9, 0xd7, 0x49, 0x1c, 0xa4, 0xc2, 0x86,
	0x15, 0x62, 0x93, 0xfa, 0x21, 0x27, 0x65, 0x8f, 0x15, 0x79, 0xad, 0xaa, 0x3c, 0xf4, 0x2e, 0x6c,
	0x4f, 0x4d, 0x97, 0xd8, 0x09, 0x41, 0x4c, 0xa3, 0x62, 0xd7, 0x35, 0x50, 0xcb, 0xd1, 0xf3, 0xb2,
	0xbf, 0x50, 0x00, 0x1d, 0x45, 0xce, 0xb7, 0x84, 0x4e, 0xec, 0xd0, 0x3c, 0x33, 0xf0, 0x0f, 0x31,
	0x8e, 0x68, 0x8d, 0xb8, 0x7d, 0xb8, 0x96, 0x9d, 0xb4, 0xa8, 0xaf, 0x6c, 0x4e, 0x90, 0x67, 0xdc,
	0xad, 0xa8, 0xb0, 0x6c, 0x46, 0x7b, 0xb0, 0xc9, 0x0b, 0x76, 0x68, 0xb3, 0xd1, 0xec, 0x18, 0xaf,
	0x0c, 0x49, 0x91, 0x73, 0x42, 0x3a, 0xf2, 0xeb, 0x0c, 0x52, 0xb2, 0xea, 0x7b, 0xa0, 0x55, 0x33,
	0xc9, 0x13, 0xfd, 0xab, 0xc3, 0xce, 0xe0, 0xf8, 0x0c, 0xe3, 0xe0, 0x71, 0xe8, 0x07, 0x7e, 0x64,
	0xba, 0x35, 0x69, 0x0a, 0x92, 0x5a, 0x12, 0x49, 0xa5, 0x73, 0x6f, 0x37, 0x6a, 0xb4, 0x8e, 0xe4,
	0x24, 0x3f, 0x84, 0xeb, 0x63, 0x6a, 0x19, 0xd8, 0x35, 0xe7, 0x0f, 0xcd, 0xc0, 0xb4, 0x08, 0x9d,
	0x3f, 0x31, 0xdd, 0x18, 0xf3, 0x2c, 0xe5, 0x2f, 0x51, 0x0f, 0x80, 0xfa, 0xd4, 0x74, 0x53, 0x68,
	0x97, 0x41, 0x0b, 0x96, 0xa4, 0x3f, 0x82, 0x90, 0x4c, 0x4d, 0x8a, 0x1f, 0xfb, 0x3e, 0x47, 0x6d,
	0x30, 0x54, 0xc5, 0x8e, 0xfa, 0xb0, 0x15, 0xc4, 0x63, 0x97, 0x58, 0x29, 0xec, 0x35, 0x06, 0x2b,
	0x9a, 0x92, 0x3a, 0x9d, 0x60, 0xc6, 0x50, 0x37, 0xd9, 0xdb, 0xec, 0x11, 0xfd, 0xa6, 0x40, 0x9f,
	0x78, 0x36, 0x99, 0x12, 0x3b, 0x36, 0xdd, 0x11, 0x6f, 0x81, 0x6c, 0x5c, 0x2c, 0x8b, 0x9d, 0x17,
	0xf4, 0xdb, 0xfb, 0x5b, 0x07, 0x9f, 0x0f, 0xa4, 0x1b, 0x23, 0x59, 0x12, 0x83, 0xc3, 0x25, 0x2e,
	0x8c, 0xa5, 0x41, 0x92, 0x2c, 0x58, 0xa9, 0x4e, 0x62, 0xcf, 0x1e, 0xcd, 0xd4, 0x2d, 0x56, 0xea,
	0xa2, 0x29, 0xa9, 0xd9, 0x98, 0x5a, 0xac, 0x03, 0x46, 0x33, 0xf5, 0x0a, 0x03, 0x14, 0x2c, 0x7c,
	0x4e, 0x84, 0x0e, 0xc9, 0xdb, 0xe7, 0x67, 0x78, 0xb3, 0xd0, 0x5c, 0xa3, 0xd9, 0x31, 0x71, 0x3c,
	0x6c, 0xd7, 0x34, 0x90, 0x6c, 0x40, 0x5b, 0xf2, 0x01, 0xe5, 0xd2, 0x33, 0xa7, 0xbc, 0x97, 0x8a,
	0x26, 0xfd, 0x16, 0xdc, 0x94, 0x84, 0xcf, 0xd5, 0x4d, 0x84, 0x21, 0x1e, 0xcd, 0xbe, 0x24, 0x5e,
	0x6d, 0x77, 0x37, 0xb9, 0x61, 0x76, 0x60, 0x9d, 0x29, 0xe0, 0x72, 0xd2, 0x87, 0xd2, 0x90, 0xf1,
	0x48, 0xb9, 0x8e, 0x18, 0xae, 0x0b, 0x4b, 0x2c, 0xc3, 0xfd, 0x4f, 0x75, 0xda, 0x85, 0x2e, 0x9d,
	0x7d, 0x95, 0xec, 0xef, 0x54, 0x13, 0x7f, 0xd2, 0xdf, 0x86, 0x5b, 0xd2, 0xb0, 0x99, 0xae, 0x83,
	0xbf, 0x37, 0xa1, 0x7d, 0x14, 0x39, 0xe8, 0x17, 0x05, 0xde, 0xa8, 0xfe, 0xf5, 0x78, 0x7f, 0x50,
	0xf3, 0x57, 0x66, 0x20, 0xdb, 0xca, 0xda, 0xa7, 0x2b, 0x53, 0xf2, 0x9d, 0xf1, 0xa7, 0x02, 0x37,
	0x16, 0xaf, 0xe3, 0xa5, 0x8e, 0x17, 0x52, 0xb5, 0xfb, 0x97, 0xa6, 0xe6, 0xda, 0x9e, 0x2b, 0xb0,
	0xbb, 0x60, 0x03, 0xdf, 0x6b, 0xea, 0x5d, 0xe4, 0x69, 0x5f, 0x5c, 0x8e, 0x97, 0x4b, 0x8a, 0xe1,
	0xaa, 0xb8, 0x37, 0xef, 0x36, 0x75, 0xc8, 0xe0, 0xda, 0x47, 0x2b, 0xc1, 0xf3, 0xb0, 0x3f, 0xc2,
	0xb5, 0xf2, 0x4e, 0x1c, 0x2e, 0xf3, 0x54, 0x22, 0x68, 0x1f, 0xaf, 0x48, 0x28, 0xe6, 0x2c, 0xee,
	0xa9, 0xa5, 0x39, 0x0b, 0xf0, 0xe5, 0x39, 0x4b, 0xef, 0x38, 0xf4, 0x0c, 0xb6, 0x2b, 0x17, 0xdc,
	0x7b, 0x4d, 0x73, 0xc8, 0x18, 0xda, 0x27, 0xab, 0x32, 0x64, 0x35, 0xcf, 0xae, 0xb0, 0x61, 0x73,
	0x67, 0x8c, 0xd0, 0xbc, 0xe6, 0xa5, 0xab, 0x0b, 0xfd, 0xaa, 0x00, 0x92, 0x5c, 0x5c, 0x07, 0xcd,
	0x07, 0x3d, 0xe3, 0x68, 0x9f, 0xad, 0xce, 0xc9, 0x64, 0x3c, 0x38, 0x7c, 0x71, 0xde, 0x53, 0x5e,
	0x9e, 0xf7, 0x94, 0x7f, 0xcf, 0x7b, 0xca, 0xf3, 0x8b, 0xde, 0xda, 0xcb, 0x8b, 0xde, 0xda, 0x3f,
	0x17, 0xbd, 0xb5, 0xef, 0x86, 0x0e, 0xa1, 0x93, 0x78, 0x3c, 0xb0, 0xfc, 0xd3, 0x61, 0xe6, 0xff,
	0x2e, 0x0f, 0x30, 0x64, 0x9f, 0x5b, 0xb3, 0xfc, 0x1b, 0x6d, 0x1e, 0xe0, 0x68, 0xdc, 0x65, 0x5f,
	0x5c, 0x1f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x67, 0xcb, 0x83, 0xab, 0xbf, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ConfirmBtcDeposit(ctx context.Context, in *MsgConfirmBtcDeposit, opts ...grpc.CallOption) (*MsgConfirmBtcDepositResponse, error)
	RegisterBtcDepositAddress(ctx context.Context, in *MsgRegisterBtcDepositAddress, opts ...grpc.CallOption) (*MsgRegisterBtcDepositAddressResponse, error)
	RegisterReserveAddress(ctx context.Context, in *MsgRegisterReserveAddress, opts ...grpc.CallOption) (*MsgRegisterReserveAddressResponse, error)
	RegisterJudge(ctx context.Context, in *MsgRegisterJudge, opts ...grpc.CallOption) (*MsgRegisterJudgeResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	WithdrawRequest(ctx context.Context, in *MsgWithdrawRequest, opts ...grpc.CallOption) (*MsgWithdrawRequestResponse, error)
	SweepProposal(ctx context.Context, in *MsgSweepProposal, opts ...grpc.CallOption) (*MsgSweepProposalResponse, error)
	WithdrawTxSigned(ctx context.Context, in *MsgWithdrawTxSigned, opts ...grpc.CallOption) (*MsgWithdrawTxSignedResponse, error)
	WithdrawTxFinal(ctx context.Context, in *MsgWithdrawTxFinal, opts ...grpc.CallOption) (*MsgWithdrawTxFinalResponse, error)
	ConfirmBtcWithdraw(ctx context.Context, in *MsgConfirmBtcWithdraw, opts ...grpc.CallOption) (*MsgConfirmBtcWithdrawResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConfirmBtcDeposit(ctx context.Context, in *MsgConfirmBtcDeposit, opts ...grpc.CallOption) (*MsgConfirmBtcDepositResponse, error) {
	out := new(MsgConfirmBtcDepositResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/ConfirmBtcDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterBtcDepositAddress(ctx context.Context, in *MsgRegisterBtcDepositAddress, opts ...grpc.CallOption) (*MsgRegisterBtcDepositAddressResponse, error) {
	out := new(MsgRegisterBtcDepositAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/RegisterBtcDepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterReserveAddress(ctx context.Context, in *MsgRegisterReserveAddress, opts ...grpc.CallOption) (*MsgRegisterReserveAddressResponse, error) {
	out := new(MsgRegisterReserveAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/RegisterReserveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterJudge(ctx context.Context, in *MsgRegisterJudge, opts ...grpc.CallOption) (*MsgRegisterJudgeResponse, error) {
	out := new(MsgRegisterJudgeResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/RegisterJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawRequest(ctx context.Context, in *MsgWithdrawRequest, opts ...grpc.CallOption) (*MsgWithdrawRequestResponse, error) {
	out := new(MsgWithdrawRequestResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/WithdrawRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SweepProposal(ctx context.Context, in *MsgSweepProposal, opts ...grpc.CallOption) (*MsgSweepProposalResponse, error) {
	out := new(MsgSweepProposalResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/SweepProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTxSigned(ctx context.Context, in *MsgWithdrawTxSigned, opts ...grpc.CallOption) (*MsgWithdrawTxSignedResponse, error) {
	out := new(MsgWithdrawTxSignedResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/WithdrawTxSigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTxFinal(ctx context.Context, in *MsgWithdrawTxFinal, opts ...grpc.CallOption) (*MsgWithdrawTxFinalResponse, error) {
	out := new(MsgWithdrawTxFinalResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/WithdrawTxFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBtcWithdraw(ctx context.Context, in *MsgConfirmBtcWithdraw, opts ...grpc.CallOption) (*MsgConfirmBtcWithdrawResponse, error) {
	out := new(MsgConfirmBtcWithdrawResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/ConfirmBtcWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ConfirmBtcDeposit(context.Context, *MsgConfirmBtcDeposit) (*MsgConfirmBtcDepositResponse, error)
	RegisterBtcDepositAddress(context.Context, *MsgRegisterBtcDepositAddress) (*MsgRegisterBtcDepositAddressResponse, error)
	RegisterReserveAddress(context.Context, *MsgRegisterReserveAddress) (*MsgRegisterReserveAddressResponse, error)
	RegisterJudge(context.Context, *MsgRegisterJudge) (*MsgRegisterJudgeResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	WithdrawRequest(context.Context, *MsgWithdrawRequest) (*MsgWithdrawRequestResponse, error)
	SweepProposal(context.Context, *MsgSweepProposal) (*MsgSweepProposalResponse, error)
	WithdrawTxSigned(context.Context, *MsgWithdrawTxSigned) (*MsgWithdrawTxSignedResponse, error)
	WithdrawTxFinal(context.Context, *MsgWithdrawTxFinal) (*MsgWithdrawTxFinalResponse, error)
	ConfirmBtcWithdraw(context.Context, *MsgConfirmBtcWithdraw) (*MsgConfirmBtcWithdrawResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConfirmBtcDeposit(ctx context.Context, req *MsgConfirmBtcDeposit) (*MsgConfirmBtcDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBtcDeposit not implemented")
}
func (*UnimplementedMsgServer) RegisterBtcDepositAddress(ctx context.Context, req *MsgRegisterBtcDepositAddress) (*MsgRegisterBtcDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBtcDepositAddress not implemented")
}
func (*UnimplementedMsgServer) RegisterReserveAddress(ctx context.Context, req *MsgRegisterReserveAddress) (*MsgRegisterReserveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReserveAddress not implemented")
}
func (*UnimplementedMsgServer) RegisterJudge(ctx context.Context, req *MsgRegisterJudge) (*MsgRegisterJudgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJudge not implemented")
}
func (*UnimplementedMsgServer) WithdrawRequest(ctx context.Context, req *MsgWithdrawRequest) (*MsgWithdrawRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawRequest not implemented")
}
func (*UnimplementedMsgServer) SweepProposal(ctx context.Context, req *MsgSweepProposal) (*MsgSweepProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SweepProposal not implemented")
}
func (*UnimplementedMsgServer) WithdrawTxSigned(ctx context.Context, req *MsgWithdrawTxSigned) (*MsgWithdrawTxSignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTxSigned not implemented")
}
func (*UnimplementedMsgServer) WithdrawTxFinal(ctx context.Context, req *MsgWithdrawTxFinal) (*MsgWithdrawTxFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTxFinal not implemented")
}
func (*UnimplementedMsgServer) ConfirmBtcWithdraw(ctx context.Context, req *MsgConfirmBtcWithdraw) (*MsgConfirmBtcWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBtcWithdraw not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConfirmBtcDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBtcDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBtcDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/ConfirmBtcDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBtcDeposit(ctx, req.(*MsgConfirmBtcDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterBtcDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterBtcDepositAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterBtcDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/RegisterBtcDepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterBtcDepositAddress(ctx, req.(*MsgRegisterBtcDepositAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterReserveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterReserveAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterReserveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/RegisterReserveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterReserveAddress(ctx, req.(*MsgRegisterReserveAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterJudge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/RegisterJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterJudge(ctx, req.(*MsgRegisterJudge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/WithdrawRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawRequest(ctx, req.(*MsgWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SweepProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSweepProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SweepProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/SweepProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SweepProposal(ctx, req.(*MsgSweepProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTxSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTxSigned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTxSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/WithdrawTxSigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTxSigned(ctx, req.(*MsgWithdrawTxSigned))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTxFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTxFinal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTxFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/WithdrawTxFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTxFinal(ctx, req.(*MsgWithdrawTxFinal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBtcWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBtcWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBtcWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/ConfirmBtcWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBtcWithdraw(ctx, req.(*MsgConfirmBtcWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twilightproject.nyks.bridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmBtcDeposit",
			Handler:    _Msg_ConfirmBtcDeposit_Handler,
		},
		{
			MethodName: "RegisterBtcDepositAddress",
			Handler:    _Msg_RegisterBtcDepositAddress_Handler,
		},
		{
			MethodName: "RegisterReserveAddress",
			Handler:    _Msg_RegisterReserveAddress_Handler,
		},
		{
			MethodName: "RegisterJudge",
			Handler:    _Msg_RegisterJudge_Handler,
		},
		{
			MethodName: "WithdrawRequest",
			Handler:    _Msg_WithdrawRequest_Handler,
		},
		{
			MethodName: "SweepProposal",
			Handler:    _Msg_SweepProposal_Handler,
		},
		{
			MethodName: "WithdrawTxSigned",
			Handler:    _Msg_WithdrawTxSigned_Handler,
		},
		{
			MethodName: "WithdrawTxFinal",
			Handler:    _Msg_WithdrawTxFinal_Handler,
		},
		{
			MethodName: "ConfirmBtcWithdraw",
			Handler:    _Msg_ConfirmBtcWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nyks/bridge/tx.proto",
}

func (m *MsgConfirmBtcDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.DepositAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBtcDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBtcDepositAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBtcDepositAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBtcDepositAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBtcDepositAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBtcDepositAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBtcDepositAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterReserveAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterReserveAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterReserveAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReserveScript) > 0 {
		i -= len(m.ReserveScript)
		copy(dAtA[i:], m.ReserveScript)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveScript)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterReserveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterReserveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterReserveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterJudge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterJudge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterJudge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterJudgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterJudgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterJudgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WithdrawAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.ReserveId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TwilightAddress) > 0 {
		i -= len(m.TwilightAddress)
		copy(dAtA[i:], m.TwilightAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSweepProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSweepProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSweepProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcSweepTx) > 0 {
		i -= len(m.BtcSweepTx)
		copy(dAtA[i:], m.BtcSweepTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcSweepTx)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BtcRefundTx) > 0 {
		i -= len(m.BtcRefundTx)
		copy(dAtA[i:], m.BtcRefundTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcRefundTx)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.IndividualTwilightReserveAccount) > 0 {
		for iNdEx := len(m.IndividualTwilightReserveAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndividualTwilightReserveAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.FeePool != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeePool))
		i--
		dAtA[i] = 0x48
	}
	if m.PublicValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PublicValue))
		i--
		dAtA[i] = 0x40
	}
	if m.PrivatePoolValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrivatePoolValue))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalValue))
		i--
		dAtA[i] = 0x30
	}
	if m.BtcRelayCapacityValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcRelayCapacityValue))
		i--
		dAtA[i] = 0x28
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReserveId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSweepProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSweepProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSweepProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcTxSigned) > 0 {
		i -= len(m.BtcTxSigned)
		copy(dAtA[i:], m.BtcTxSigned)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcTxSigned)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxSignedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxSignedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxSignedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxFinal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxFinal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxFinal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcTx) > 0 {
		i -= len(m.BtcTx)
		copy(dAtA[i:], m.BtcTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcTx)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxFinalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxFinalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxFinalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBtcWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBtcWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConfirmBtcDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DepositAmount != 0 {
		n += 1 + sovTx(uint64(m.DepositAmount))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmBtcDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBtcDepositAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBtcDepositAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterReserveAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveScript)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterReserveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterJudge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterJudgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TwilightAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReserveId != 0 {
		n += 1 + sovTx(uint64(m.ReserveId))
	}
	if m.WithdrawAmount != 0 {
		n += 1 + sovTx(uint64(m.WithdrawAmount))
	}
	return n
}

func (m *MsgWithdrawRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSweepProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReserveId != 0 {
		n += 1 + sovTx(uint64(m.ReserveId))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BtcRelayCapacityValue != 0 {
		n += 1 + sovTx(uint64(m.BtcRelayCapacityValue))
	}
	if m.TotalValue != 0 {
		n += 1 + sovTx(uint64(m.TotalValue))
	}
	if m.PrivatePoolValue != 0 {
		n += 1 + sovTx(uint64(m.PrivatePoolValue))
	}
	if m.PublicValue != 0 {
		n += 1 + sovTx(uint64(m.PublicValue))
	}
	if m.FeePool != 0 {
		n += 1 + sovTx(uint64(m.FeePool))
	}
	if len(m.IndividualTwilightReserveAccount) > 0 {
		for _, e := range m.IndividualTwilightReserveAccount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BtcRefundTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcSweepTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSweepProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawTxSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcTxSigned)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTxSignedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawTxFinal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTxFinalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmBtcWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmBtcWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConfirmBtcDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBtcDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBtcDepositAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBtcDepositAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterReserveAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterReserveAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterReserveAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterReserveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterReserveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterReserveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterJudge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterJudge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterJudge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterJudgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterJudgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterJudgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			m.WithdrawAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSweepProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSweepProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSweepProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcRelayCapacityValue", wireType)
			}
			m.BtcRelayCapacityValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcRelayCapacityValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
			}
			m.TotalValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivatePoolValue", wireType)
			}
			m.PrivatePoolValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivatePoolValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicValue", wireType)
			}
			m.PublicValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePool", wireType)
			}
			m.FeePool = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeePool |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndividualTwilightReserveAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndividualTwilightReserveAccount = append(m.IndividualTwilightReserveAccount, &types.IndividualTwilightReserveAccount{})
			if err := m.IndividualTwilightReserveAccount[len(m.IndividualTwilightReserveAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcRefundTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcRefundTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcSweepTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcSweepTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSweepProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSweepProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSweepProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTxSigned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcTxSigned = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxSignedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxSignedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxSignedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxFinal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxFinal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxFinal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxFinalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxFinalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxFinalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBtcWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBtcWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
