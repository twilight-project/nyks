// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/bridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgConfirmBtcDeposit struct {
	ReserveAddress         string `protobuf:"bytes,1,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	DepositAmount          uint64 `protobuf:"varint,2,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`
	Height                 uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Hash                   string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,5,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
	OracleAddress          string `protobuf:"bytes,7,opt,name=oracleAddress,proto3" json:"oracleAddress,omitempty"`
}

func (m *MsgConfirmBtcDeposit) Reset()         { *m = MsgConfirmBtcDeposit{} }
func (m *MsgConfirmBtcDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcDeposit) ProtoMessage()    {}
func (*MsgConfirmBtcDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{0}
}
func (m *MsgConfirmBtcDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcDeposit.Merge(m, src)
}
func (m *MsgConfirmBtcDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcDeposit proto.InternalMessageInfo

func (m *MsgConfirmBtcDeposit) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetDepositAmount() uint64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *MsgConfirmBtcDeposit) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgConfirmBtcDeposit) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

func (m *MsgConfirmBtcDeposit) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

type MsgConfirmBtcDepositResponse struct {
	TwilightDepositAddress string `protobuf:"bytes,1,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *MsgConfirmBtcDepositResponse) Reset()         { *m = MsgConfirmBtcDepositResponse{} }
func (m *MsgConfirmBtcDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcDepositResponse) ProtoMessage()    {}
func (*MsgConfirmBtcDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{1}
}
func (m *MsgConfirmBtcDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcDepositResponse.Merge(m, src)
}
func (m *MsgConfirmBtcDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcDepositResponse proto.InternalMessageInfo

func (m *MsgConfirmBtcDepositResponse) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

type MsgRegisterBtcDepositAddress struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,2,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
}

func (m *MsgRegisterBtcDepositAddress) Reset()         { *m = MsgRegisterBtcDepositAddress{} }
func (m *MsgRegisterBtcDepositAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBtcDepositAddress) ProtoMessage()    {}
func (*MsgRegisterBtcDepositAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{2}
}
func (m *MsgRegisterBtcDepositAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBtcDepositAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBtcDepositAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBtcDepositAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBtcDepositAddress.Merge(m, src)
}
func (m *MsgRegisterBtcDepositAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBtcDepositAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBtcDepositAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBtcDepositAddress proto.InternalMessageInfo

func (m *MsgRegisterBtcDepositAddress) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *MsgRegisterBtcDepositAddress) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

type MsgRegisterBtcDepositAddressResponse struct {
}

func (m *MsgRegisterBtcDepositAddressResponse) Reset()         { *m = MsgRegisterBtcDepositAddressResponse{} }
func (m *MsgRegisterBtcDepositAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBtcDepositAddressResponse) ProtoMessage()    {}
func (*MsgRegisterBtcDepositAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{3}
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBtcDepositAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBtcDepositAddressResponse.Merge(m, src)
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBtcDepositAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBtcDepositAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBtcDepositAddressResponse proto.InternalMessageInfo

type MsgRegisterReserveAddress struct {
	ReserveScript  string `protobuf:"bytes,1,opt,name=reserveScript,proto3" json:"reserveScript,omitempty"`
	ReserveAddress string `protobuf:"bytes,2,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	JudgeAddress   string `protobuf:"bytes,3,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgRegisterReserveAddress) Reset()         { *m = MsgRegisterReserveAddress{} }
func (m *MsgRegisterReserveAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterReserveAddress) ProtoMessage()    {}
func (*MsgRegisterReserveAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{4}
}
func (m *MsgRegisterReserveAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterReserveAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterReserveAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterReserveAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterReserveAddress.Merge(m, src)
}
func (m *MsgRegisterReserveAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterReserveAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterReserveAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterReserveAddress proto.InternalMessageInfo

func (m *MsgRegisterReserveAddress) GetReserveScript() string {
	if m != nil {
		return m.ReserveScript
	}
	return ""
}

func (m *MsgRegisterReserveAddress) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgRegisterReserveAddress) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgRegisterReserveAddressResponse struct {
	ReserveId      string `protobuf:"bytes,1,opt,name=reserveId,proto3" json:"reserveId,omitempty"`
	ReserveAddress string `protobuf:"bytes,2,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
}

func (m *MsgRegisterReserveAddressResponse) Reset()         { *m = MsgRegisterReserveAddressResponse{} }
func (m *MsgRegisterReserveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterReserveAddressResponse) ProtoMessage()    {}
func (*MsgRegisterReserveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{5}
}
func (m *MsgRegisterReserveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterReserveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterReserveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterReserveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterReserveAddressResponse.Merge(m, src)
}
func (m *MsgRegisterReserveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterReserveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterReserveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterReserveAddressResponse proto.InternalMessageInfo

func (m *MsgRegisterReserveAddressResponse) GetReserveId() string {
	if m != nil {
		return m.ReserveId
	}
	return ""
}

func (m *MsgRegisterReserveAddressResponse) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

type MsgRegisterJudge struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JudgeAddress     string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *MsgRegisterJudge) Reset()         { *m = MsgRegisterJudge{} }
func (m *MsgRegisterJudge) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterJudge) ProtoMessage()    {}
func (*MsgRegisterJudge) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{6}
}
func (m *MsgRegisterJudge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterJudge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterJudge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterJudge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterJudge.Merge(m, src)
}
func (m *MsgRegisterJudge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterJudge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterJudge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterJudge proto.InternalMessageInfo

func (m *MsgRegisterJudge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterJudge) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *MsgRegisterJudge) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type MsgRegisterJudgeResponse struct {
}

func (m *MsgRegisterJudgeResponse) Reset()         { *m = MsgRegisterJudgeResponse{} }
func (m *MsgRegisterJudgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterJudgeResponse) ProtoMessage()    {}
func (*MsgRegisterJudgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{7}
}
func (m *MsgRegisterJudgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterJudgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterJudgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterJudgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterJudgeResponse.Merge(m, src)
}
func (m *MsgRegisterJudgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterJudgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterJudgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterJudgeResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgWithdrawBtcRequest struct {
	WithdrawAddress string `protobuf:"bytes,1,opt,name=withdrawAddress,proto3" json:"withdrawAddress,omitempty"`
	ReserveAddress  string `protobuf:"bytes,2,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	WithdrawAmount  uint64 `protobuf:"varint,3,opt,name=withdrawAmount,proto3" json:"withdrawAmount,omitempty"`
	TwilightAddress string `protobuf:"bytes,4,opt,name=twilightAddress,proto3" json:"twilightAddress,omitempty"`
}

func (m *MsgWithdrawBtcRequest) Reset()         { *m = MsgWithdrawBtcRequest{} }
func (m *MsgWithdrawBtcRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawBtcRequest) ProtoMessage()    {}
func (*MsgWithdrawBtcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{8}
}
func (m *MsgWithdrawBtcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawBtcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawBtcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawBtcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawBtcRequest.Merge(m, src)
}
func (m *MsgWithdrawBtcRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawBtcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawBtcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawBtcRequest proto.InternalMessageInfo

func (m *MsgWithdrawBtcRequest) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

func (m *MsgWithdrawBtcRequest) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgWithdrawBtcRequest) GetWithdrawAmount() uint64 {
	if m != nil {
		return m.WithdrawAmount
	}
	return 0
}

func (m *MsgWithdrawBtcRequest) GetTwilightAddress() string {
	if m != nil {
		return m.TwilightAddress
	}
	return ""
}

type MsgWithdrawBtcRequestResponse struct {
}

func (m *MsgWithdrawBtcRequestResponse) Reset()         { *m = MsgWithdrawBtcRequestResponse{} }
func (m *MsgWithdrawBtcRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawBtcRequestResponse) ProtoMessage()    {}
func (*MsgWithdrawBtcRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{9}
}
func (m *MsgWithdrawBtcRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawBtcRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawBtcRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawBtcRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawBtcRequestResponse.Merge(m, src)
}
func (m *MsgWithdrawBtcRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawBtcRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawBtcRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawBtcRequestResponse proto.InternalMessageInfo

type MsgSweepProposal struct {
	ReserveId             uint64   `protobuf:"varint,1,opt,name=reserveId,proto3" json:"reserveId,omitempty"`
	NewReserveAddress     string   `protobuf:"bytes,2,opt,name=newReserveAddress,proto3" json:"newReserveAddress,omitempty"`
	JudgeAddress          string   `protobuf:"bytes,3,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	BtcBlockNumber        uint64   `protobuf:"varint,4,opt,name=BtcBlockNumber,proto3" json:"BtcBlockNumber,omitempty"`
	BtcRelayCapacityValue uint64   `protobuf:"varint,5,opt,name=btcRelayCapacityValue,proto3" json:"btcRelayCapacityValue,omitempty"`
	BtcTxHash             string   `protobuf:"bytes,6,opt,name=btcTxHash,proto3" json:"btcTxHash,omitempty"`
	UnlockHeight          uint64   `protobuf:"varint,7,opt,name=UnlockHeight,proto3" json:"UnlockHeight,omitempty"`
	RoundId               uint64   `protobuf:"varint,8,opt,name=roundId,proto3" json:"roundId,omitempty"`
	WithdrawIdentifiers   []string `protobuf:"bytes,9,rep,name=withdrawIdentifiers,proto3" json:"withdrawIdentifiers,omitempty"`
}

func (m *MsgSweepProposal) Reset()         { *m = MsgSweepProposal{} }
func (m *MsgSweepProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSweepProposal) ProtoMessage()    {}
func (*MsgSweepProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{10}
}
func (m *MsgSweepProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSweepProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSweepProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSweepProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSweepProposal.Merge(m, src)
}
func (m *MsgSweepProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSweepProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSweepProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSweepProposal proto.InternalMessageInfo

func (m *MsgSweepProposal) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *MsgSweepProposal) GetNewReserveAddress() string {
	if m != nil {
		return m.NewReserveAddress
	}
	return ""
}

func (m *MsgSweepProposal) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *MsgSweepProposal) GetBtcBlockNumber() uint64 {
	if m != nil {
		return m.BtcBlockNumber
	}
	return 0
}

func (m *MsgSweepProposal) GetBtcRelayCapacityValue() uint64 {
	if m != nil {
		return m.BtcRelayCapacityValue
	}
	return 0
}

func (m *MsgSweepProposal) GetBtcTxHash() string {
	if m != nil {
		return m.BtcTxHash
	}
	return ""
}

func (m *MsgSweepProposal) GetUnlockHeight() uint64 {
	if m != nil {
		return m.UnlockHeight
	}
	return 0
}

func (m *MsgSweepProposal) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *MsgSweepProposal) GetWithdrawIdentifiers() []string {
	if m != nil {
		return m.WithdrawIdentifiers
	}
	return nil
}

type MsgSweepProposalResponse struct {
}

func (m *MsgSweepProposalResponse) Reset()         { *m = MsgSweepProposalResponse{} }
func (m *MsgSweepProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSweepProposalResponse) ProtoMessage()    {}
func (*MsgSweepProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{11}
}
func (m *MsgSweepProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSweepProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSweepProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSweepProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSweepProposalResponse.Merge(m, src)
}
func (m *MsgSweepProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSweepProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSweepProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSweepProposalResponse proto.InternalMessageInfo

type MsgWithdrawTxSigned struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	BtcTxSigned      string `protobuf:"bytes,3,opt,name=btcTxSigned,proto3" json:"btcTxSigned,omitempty"`
}

func (m *MsgWithdrawTxSigned) Reset()         { *m = MsgWithdrawTxSigned{} }
func (m *MsgWithdrawTxSigned) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxSigned) ProtoMessage()    {}
func (*MsgWithdrawTxSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{12}
}
func (m *MsgWithdrawTxSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxSigned.Merge(m, src)
}
func (m *MsgWithdrawTxSigned) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxSigned.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxSigned proto.InternalMessageInfo

func (m *MsgWithdrawTxSigned) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawTxSigned) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgWithdrawTxSigned) GetBtcTxSigned() string {
	if m != nil {
		return m.BtcTxSigned
	}
	return ""
}

type MsgWithdrawTxSignedResponse struct {
}

func (m *MsgWithdrawTxSignedResponse) Reset()         { *m = MsgWithdrawTxSignedResponse{} }
func (m *MsgWithdrawTxSignedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxSignedResponse) ProtoMessage()    {}
func (*MsgWithdrawTxSignedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{13}
}
func (m *MsgWithdrawTxSignedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxSignedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxSignedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxSignedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxSignedResponse.Merge(m, src)
}
func (m *MsgWithdrawTxSignedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxSignedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxSignedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxSignedResponse proto.InternalMessageInfo

type MsgWithdrawTxFinal struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JudgeAddress string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
	BtcTx        string `protobuf:"bytes,3,opt,name=btcTx,proto3" json:"btcTx,omitempty"`
}

func (m *MsgWithdrawTxFinal) Reset()         { *m = MsgWithdrawTxFinal{} }
func (m *MsgWithdrawTxFinal) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxFinal) ProtoMessage()    {}
func (*MsgWithdrawTxFinal) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{14}
}
func (m *MsgWithdrawTxFinal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxFinal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxFinal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxFinal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxFinal.Merge(m, src)
}
func (m *MsgWithdrawTxFinal) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxFinal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxFinal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxFinal proto.InternalMessageInfo

func (m *MsgWithdrawTxFinal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawTxFinal) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

func (m *MsgWithdrawTxFinal) GetBtcTx() string {
	if m != nil {
		return m.BtcTx
	}
	return ""
}

type MsgWithdrawTxFinalResponse struct {
}

func (m *MsgWithdrawTxFinalResponse) Reset()         { *m = MsgWithdrawTxFinalResponse{} }
func (m *MsgWithdrawTxFinalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTxFinalResponse) ProtoMessage()    {}
func (*MsgWithdrawTxFinalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{15}
}
func (m *MsgWithdrawTxFinalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTxFinalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTxFinalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTxFinalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTxFinalResponse.Merge(m, src)
}
func (m *MsgWithdrawTxFinalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTxFinalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTxFinalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTxFinalResponse proto.InternalMessageInfo

type MsgSignRefund struct {
	ReserveAddress   string `protobuf:"bytes,1,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	SignerPublicKey  string `protobuf:"bytes,2,opt,name=signerPublicKey,proto3" json:"signerPublicKey,omitempty"`
	RefundSignature  string `protobuf:"bytes,3,opt,name=refundSignature,proto3" json:"refundSignature,omitempty"`
	BtcOracleAddress string `protobuf:"bytes,4,opt,name=btcOracleAddress,proto3" json:"btcOracleAddress,omitempty"`
}

func (m *MsgSignRefund) Reset()         { *m = MsgSignRefund{} }
func (m *MsgSignRefund) String() string { return proto.CompactTextString(m) }
func (*MsgSignRefund) ProtoMessage()    {}
func (*MsgSignRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{16}
}
func (m *MsgSignRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignRefund.Merge(m, src)
}
func (m *MsgSignRefund) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignRefund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignRefund proto.InternalMessageInfo

func (m *MsgSignRefund) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgSignRefund) GetSignerPublicKey() string {
	if m != nil {
		return m.SignerPublicKey
	}
	return ""
}

func (m *MsgSignRefund) GetRefundSignature() string {
	if m != nil {
		return m.RefundSignature
	}
	return ""
}

func (m *MsgSignRefund) GetBtcOracleAddress() string {
	if m != nil {
		return m.BtcOracleAddress
	}
	return ""
}

type MsgSignRefundResponse struct {
}

func (m *MsgSignRefundResponse) Reset()         { *m = MsgSignRefundResponse{} }
func (m *MsgSignRefundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignRefundResponse) ProtoMessage()    {}
func (*MsgSignRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{17}
}
func (m *MsgSignRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignRefundResponse.Merge(m, src)
}
func (m *MsgSignRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignRefundResponse proto.InternalMessageInfo

type MsgSignSweep struct {
	ReserveAddress   string   `protobuf:"bytes,1,opt,name=reserveAddress,proto3" json:"reserveAddress,omitempty"`
	SignerPublicKey  string   `protobuf:"bytes,2,opt,name=signerPublicKey,proto3" json:"signerPublicKey,omitempty"`
	SweepSignature   []string `protobuf:"bytes,3,rep,name=sweepSignature,proto3" json:"sweepSignature,omitempty"`
	BtcOracleAddress string   `protobuf:"bytes,4,opt,name=btcOracleAddress,proto3" json:"btcOracleAddress,omitempty"`
}

func (m *MsgSignSweep) Reset()         { *m = MsgSignSweep{} }
func (m *MsgSignSweep) String() string { return proto.CompactTextString(m) }
func (*MsgSignSweep) ProtoMessage()    {}
func (*MsgSignSweep) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{18}
}
func (m *MsgSignSweep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignSweep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignSweep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignSweep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignSweep.Merge(m, src)
}
func (m *MsgSignSweep) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignSweep) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignSweep.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignSweep proto.InternalMessageInfo

func (m *MsgSignSweep) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *MsgSignSweep) GetSignerPublicKey() string {
	if m != nil {
		return m.SignerPublicKey
	}
	return ""
}

func (m *MsgSignSweep) GetSweepSignature() []string {
	if m != nil {
		return m.SweepSignature
	}
	return nil
}

func (m *MsgSignSweep) GetBtcOracleAddress() string {
	if m != nil {
		return m.BtcOracleAddress
	}
	return ""
}

type MsgSignSweepResponse struct {
}

func (m *MsgSignSweepResponse) Reset()         { *m = MsgSignSweepResponse{} }
func (m *MsgSignSweepResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignSweepResponse) ProtoMessage()    {}
func (*MsgSignSweepResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{19}
}
func (m *MsgSignSweepResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignSweepResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignSweepResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignSweepResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignSweepResponse.Merge(m, src)
}
func (m *MsgSignSweepResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignSweepResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignSweepResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignSweepResponse proto.InternalMessageInfo

type MsgBroadcastTxSweep struct {
	SignedSweepTx string `protobuf:"bytes,1,opt,name=signedSweepTx,proto3" json:"signedSweepTx,omitempty"`
	JudgeAddress  string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgBroadcastTxSweep) Reset()         { *m = MsgBroadcastTxSweep{} }
func (m *MsgBroadcastTxSweep) String() string { return proto.CompactTextString(m) }
func (*MsgBroadcastTxSweep) ProtoMessage()    {}
func (*MsgBroadcastTxSweep) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{20}
}
func (m *MsgBroadcastTxSweep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBroadcastTxSweep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBroadcastTxSweep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBroadcastTxSweep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBroadcastTxSweep.Merge(m, src)
}
func (m *MsgBroadcastTxSweep) XXX_Size() int {
	return m.Size()
}
func (m *MsgBroadcastTxSweep) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBroadcastTxSweep.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBroadcastTxSweep proto.InternalMessageInfo

func (m *MsgBroadcastTxSweep) GetSignedSweepTx() string {
	if m != nil {
		return m.SignedSweepTx
	}
	return ""
}

func (m *MsgBroadcastTxSweep) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgBroadcastTxSweepResponse struct {
}

func (m *MsgBroadcastTxSweepResponse) Reset()         { *m = MsgBroadcastTxSweepResponse{} }
func (m *MsgBroadcastTxSweepResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBroadcastTxSweepResponse) ProtoMessage()    {}
func (*MsgBroadcastTxSweepResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{21}
}
func (m *MsgBroadcastTxSweepResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBroadcastTxSweepResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBroadcastTxSweepResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBroadcastTxSweepResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBroadcastTxSweepResponse.Merge(m, src)
}
func (m *MsgBroadcastTxSweepResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBroadcastTxSweepResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBroadcastTxSweepResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBroadcastTxSweepResponse proto.InternalMessageInfo

type MsgBroadcastTxRefund struct {
	SignedRefundTx string `protobuf:"bytes,1,opt,name=signedRefundTx,proto3" json:"signedRefundTx,omitempty"`
	JudgeAddress   string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgBroadcastTxRefund) Reset()         { *m = MsgBroadcastTxRefund{} }
func (m *MsgBroadcastTxRefund) String() string { return proto.CompactTextString(m) }
func (*MsgBroadcastTxRefund) ProtoMessage()    {}
func (*MsgBroadcastTxRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{22}
}
func (m *MsgBroadcastTxRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBroadcastTxRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBroadcastTxRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBroadcastTxRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBroadcastTxRefund.Merge(m, src)
}
func (m *MsgBroadcastTxRefund) XXX_Size() int {
	return m.Size()
}
func (m *MsgBroadcastTxRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBroadcastTxRefund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBroadcastTxRefund proto.InternalMessageInfo

func (m *MsgBroadcastTxRefund) GetSignedRefundTx() string {
	if m != nil {
		return m.SignedRefundTx
	}
	return ""
}

func (m *MsgBroadcastTxRefund) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgBroadcastTxRefundResponse struct {
}

func (m *MsgBroadcastTxRefundResponse) Reset()         { *m = MsgBroadcastTxRefundResponse{} }
func (m *MsgBroadcastTxRefundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBroadcastTxRefundResponse) ProtoMessage()    {}
func (*MsgBroadcastTxRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{23}
}
func (m *MsgBroadcastTxRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBroadcastTxRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBroadcastTxRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBroadcastTxRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBroadcastTxRefundResponse.Merge(m, src)
}
func (m *MsgBroadcastTxRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBroadcastTxRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBroadcastTxRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBroadcastTxRefundResponse proto.InternalMessageInfo

type MsgProposeRefundHash struct {
	RefundHash   string `protobuf:"bytes,1,opt,name=refundHash,proto3" json:"refundHash,omitempty"`
	JudgeAddress string `protobuf:"bytes,2,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgProposeRefundHash) Reset()         { *m = MsgProposeRefundHash{} }
func (m *MsgProposeRefundHash) String() string { return proto.CompactTextString(m) }
func (*MsgProposeRefundHash) ProtoMessage()    {}
func (*MsgProposeRefundHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{24}
}
func (m *MsgProposeRefundHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeRefundHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeRefundHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeRefundHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeRefundHash.Merge(m, src)
}
func (m *MsgProposeRefundHash) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeRefundHash) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeRefundHash.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeRefundHash proto.InternalMessageInfo

func (m *MsgProposeRefundHash) GetRefundHash() string {
	if m != nil {
		return m.RefundHash
	}
	return ""
}

func (m *MsgProposeRefundHash) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgProposeRefundHashResponse struct {
}

func (m *MsgProposeRefundHashResponse) Reset()         { *m = MsgProposeRefundHashResponse{} }
func (m *MsgProposeRefundHashResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeRefundHashResponse) ProtoMessage()    {}
func (*MsgProposeRefundHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{25}
}
func (m *MsgProposeRefundHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeRefundHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeRefundHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeRefundHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeRefundHashResponse.Merge(m, src)
}
func (m *MsgProposeRefundHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeRefundHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeRefundHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeRefundHashResponse proto.InternalMessageInfo

type MsgConfirmBtcWithdraw struct {
	TxHash       string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Height       uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash         string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	JudgeAddress string `protobuf:"bytes,4,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgConfirmBtcWithdraw) Reset()         { *m = MsgConfirmBtcWithdraw{} }
func (m *MsgConfirmBtcWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcWithdraw) ProtoMessage()    {}
func (*MsgConfirmBtcWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{26}
}
func (m *MsgConfirmBtcWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcWithdraw.Merge(m, src)
}
func (m *MsgConfirmBtcWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcWithdraw proto.InternalMessageInfo

func (m *MsgConfirmBtcWithdraw) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgConfirmBtcWithdraw) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgConfirmBtcWithdraw) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MsgConfirmBtcWithdraw) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgConfirmBtcWithdrawResponse struct {
}

func (m *MsgConfirmBtcWithdrawResponse) Reset()         { *m = MsgConfirmBtcWithdrawResponse{} }
func (m *MsgConfirmBtcWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBtcWithdrawResponse) ProtoMessage()    {}
func (*MsgConfirmBtcWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{27}
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBtcWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBtcWithdrawResponse.Merge(m, src)
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBtcWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBtcWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBtcWithdrawResponse proto.InternalMessageInfo

type MsgUnsignedTxSweep struct {
	TxId               string `protobuf:"bytes,1,opt,name=txId,proto3" json:"txId,omitempty"`
	BtcUnsignedSweepTx string `protobuf:"bytes,2,opt,name=btcUnsignedSweepTx,proto3" json:"btcUnsignedSweepTx,omitempty"`
	JudgeAddress       string `protobuf:"bytes,3,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgUnsignedTxSweep) Reset()         { *m = MsgUnsignedTxSweep{} }
func (m *MsgUnsignedTxSweep) String() string { return proto.CompactTextString(m) }
func (*MsgUnsignedTxSweep) ProtoMessage()    {}
func (*MsgUnsignedTxSweep) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{28}
}
func (m *MsgUnsignedTxSweep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnsignedTxSweep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnsignedTxSweep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnsignedTxSweep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnsignedTxSweep.Merge(m, src)
}
func (m *MsgUnsignedTxSweep) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnsignedTxSweep) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnsignedTxSweep.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnsignedTxSweep proto.InternalMessageInfo

func (m *MsgUnsignedTxSweep) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *MsgUnsignedTxSweep) GetBtcUnsignedSweepTx() string {
	if m != nil {
		return m.BtcUnsignedSweepTx
	}
	return ""
}

func (m *MsgUnsignedTxSweep) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgUnsignedTxSweepResponse struct {
}

func (m *MsgUnsignedTxSweepResponse) Reset()         { *m = MsgUnsignedTxSweepResponse{} }
func (m *MsgUnsignedTxSweepResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnsignedTxSweepResponse) ProtoMessage()    {}
func (*MsgUnsignedTxSweepResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{29}
}
func (m *MsgUnsignedTxSweepResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnsignedTxSweepResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnsignedTxSweepResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnsignedTxSweepResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnsignedTxSweepResponse.Merge(m, src)
}
func (m *MsgUnsignedTxSweepResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnsignedTxSweepResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnsignedTxSweepResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnsignedTxSweepResponse proto.InternalMessageInfo

type MsgUnsignedTxRefund struct {
	ReserveId           uint64 `protobuf:"varint,1,opt,name=reserveId,proto3" json:"reserveId,omitempty"`
	BtcUnsignedRefundTx string `protobuf:"bytes,2,opt,name=btcUnsignedRefundTx,proto3" json:"btcUnsignedRefundTx,omitempty"`
	JudgeAddress        string `protobuf:"bytes,3,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgUnsignedTxRefund) Reset()         { *m = MsgUnsignedTxRefund{} }
func (m *MsgUnsignedTxRefund) String() string { return proto.CompactTextString(m) }
func (*MsgUnsignedTxRefund) ProtoMessage()    {}
func (*MsgUnsignedTxRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{30}
}
func (m *MsgUnsignedTxRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnsignedTxRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnsignedTxRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnsignedTxRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnsignedTxRefund.Merge(m, src)
}
func (m *MsgUnsignedTxRefund) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnsignedTxRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnsignedTxRefund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnsignedTxRefund proto.InternalMessageInfo

func (m *MsgUnsignedTxRefund) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *MsgUnsignedTxRefund) GetBtcUnsignedRefundTx() string {
	if m != nil {
		return m.BtcUnsignedRefundTx
	}
	return ""
}

func (m *MsgUnsignedTxRefund) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgUnsignedTxRefundResponse struct {
}

func (m *MsgUnsignedTxRefundResponse) Reset()         { *m = MsgUnsignedTxRefundResponse{} }
func (m *MsgUnsignedTxRefundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnsignedTxRefundResponse) ProtoMessage()    {}
func (*MsgUnsignedTxRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{31}
}
func (m *MsgUnsignedTxRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnsignedTxRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnsignedTxRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnsignedTxRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnsignedTxRefundResponse.Merge(m, src)
}
func (m *MsgUnsignedTxRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnsignedTxRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnsignedTxRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnsignedTxRefundResponse proto.InternalMessageInfo

type MsgProposeSweepAddress struct {
	BtcAddress   string `protobuf:"bytes,1,opt,name=btcAddress,proto3" json:"btcAddress,omitempty"`
	BtcScript    string `protobuf:"bytes,2,opt,name=btcScript,proto3" json:"btcScript,omitempty"`
	ReserveId    uint64 `protobuf:"varint,3,opt,name=reserveId,proto3" json:"reserveId,omitempty"`
	JudgeAddress string `protobuf:"bytes,4,opt,name=judgeAddress,proto3" json:"judgeAddress,omitempty"`
}

func (m *MsgProposeSweepAddress) Reset()         { *m = MsgProposeSweepAddress{} }
func (m *MsgProposeSweepAddress) String() string { return proto.CompactTextString(m) }
func (*MsgProposeSweepAddress) ProtoMessage()    {}
func (*MsgProposeSweepAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{32}
}
func (m *MsgProposeSweepAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeSweepAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeSweepAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeSweepAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeSweepAddress.Merge(m, src)
}
func (m *MsgProposeSweepAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeSweepAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeSweepAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeSweepAddress proto.InternalMessageInfo

func (m *MsgProposeSweepAddress) GetBtcAddress() string {
	if m != nil {
		return m.BtcAddress
	}
	return ""
}

func (m *MsgProposeSweepAddress) GetBtcScript() string {
	if m != nil {
		return m.BtcScript
	}
	return ""
}

func (m *MsgProposeSweepAddress) GetReserveId() uint64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *MsgProposeSweepAddress) GetJudgeAddress() string {
	if m != nil {
		return m.JudgeAddress
	}
	return ""
}

type MsgProposeSweepAddressResponse struct {
}

func (m *MsgProposeSweepAddressResponse) Reset()         { *m = MsgProposeSweepAddressResponse{} }
func (m *MsgProposeSweepAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeSweepAddressResponse) ProtoMessage()    {}
func (*MsgProposeSweepAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8902f9254d7124, []int{33}
}
func (m *MsgProposeSweepAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeSweepAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeSweepAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeSweepAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeSweepAddressResponse.Merge(m, src)
}
func (m *MsgProposeSweepAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeSweepAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeSweepAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeSweepAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgConfirmBtcDeposit)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcDeposit")
	proto.RegisterType((*MsgConfirmBtcDepositResponse)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcDepositResponse")
	proto.RegisterType((*MsgRegisterBtcDepositAddress)(nil), "twilightproject.nyks.bridge.MsgRegisterBtcDepositAddress")
	proto.RegisterType((*MsgRegisterBtcDepositAddressResponse)(nil), "twilightproject.nyks.bridge.MsgRegisterBtcDepositAddressResponse")
	proto.RegisterType((*MsgRegisterReserveAddress)(nil), "twilightproject.nyks.bridge.MsgRegisterReserveAddress")
	proto.RegisterType((*MsgRegisterReserveAddressResponse)(nil), "twilightproject.nyks.bridge.MsgRegisterReserveAddressResponse")
	proto.RegisterType((*MsgRegisterJudge)(nil), "twilightproject.nyks.bridge.MsgRegisterJudge")
	proto.RegisterType((*MsgRegisterJudgeResponse)(nil), "twilightproject.nyks.bridge.MsgRegisterJudgeResponse")
	proto.RegisterType((*MsgWithdrawBtcRequest)(nil), "twilightproject.nyks.bridge.MsgWithdrawBtcRequest")
	proto.RegisterType((*MsgWithdrawBtcRequestResponse)(nil), "twilightproject.nyks.bridge.MsgWithdrawBtcRequestResponse")
	proto.RegisterType((*MsgSweepProposal)(nil), "twilightproject.nyks.bridge.MsgSweepProposal")
	proto.RegisterType((*MsgSweepProposalResponse)(nil), "twilightproject.nyks.bridge.MsgSweepProposalResponse")
	proto.RegisterType((*MsgWithdrawTxSigned)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxSigned")
	proto.RegisterType((*MsgWithdrawTxSignedResponse)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxSignedResponse")
	proto.RegisterType((*MsgWithdrawTxFinal)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxFinal")
	proto.RegisterType((*MsgWithdrawTxFinalResponse)(nil), "twilightproject.nyks.bridge.MsgWithdrawTxFinalResponse")
	proto.RegisterType((*MsgSignRefund)(nil), "twilightproject.nyks.bridge.MsgSignRefund")
	proto.RegisterType((*MsgSignRefundResponse)(nil), "twilightproject.nyks.bridge.MsgSignRefundResponse")
	proto.RegisterType((*MsgSignSweep)(nil), "twilightproject.nyks.bridge.MsgSignSweep")
	proto.RegisterType((*MsgSignSweepResponse)(nil), "twilightproject.nyks.bridge.MsgSignSweepResponse")
	proto.RegisterType((*MsgBroadcastTxSweep)(nil), "twilightproject.nyks.bridge.MsgBroadcastTxSweep")
	proto.RegisterType((*MsgBroadcastTxSweepResponse)(nil), "twilightproject.nyks.bridge.MsgBroadcastTxSweepResponse")
	proto.RegisterType((*MsgBroadcastTxRefund)(nil), "twilightproject.nyks.bridge.MsgBroadcastTxRefund")
	proto.RegisterType((*MsgBroadcastTxRefundResponse)(nil), "twilightproject.nyks.bridge.MsgBroadcastTxRefundResponse")
	proto.RegisterType((*MsgProposeRefundHash)(nil), "twilightproject.nyks.bridge.MsgProposeRefundHash")
	proto.RegisterType((*MsgProposeRefundHashResponse)(nil), "twilightproject.nyks.bridge.MsgProposeRefundHashResponse")
	proto.RegisterType((*MsgConfirmBtcWithdraw)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcWithdraw")
	proto.RegisterType((*MsgConfirmBtcWithdrawResponse)(nil), "twilightproject.nyks.bridge.MsgConfirmBtcWithdrawResponse")
	proto.RegisterType((*MsgUnsignedTxSweep)(nil), "twilightproject.nyks.bridge.MsgUnsignedTxSweep")
	proto.RegisterType((*MsgUnsignedTxSweepResponse)(nil), "twilightproject.nyks.bridge.MsgUnsignedTxSweepResponse")
	proto.RegisterType((*MsgUnsignedTxRefund)(nil), "twilightproject.nyks.bridge.MsgUnsignedTxRefund")
	proto.RegisterType((*MsgUnsignedTxRefundResponse)(nil), "twilightproject.nyks.bridge.MsgUnsignedTxRefundResponse")
	proto.RegisterType((*MsgProposeSweepAddress)(nil), "twilightproject.nyks.bridge.MsgProposeSweepAddress")
	proto.RegisterType((*MsgProposeSweepAddressResponse)(nil), "twilightproject.nyks.bridge.MsgProposeSweepAddressResponse")
}

func init() { proto.RegisterFile("nyks/bridge/tx.proto", fileDescriptor_db8902f9254d7124) }

var fileDescriptor_db8902f9254d7124 = []byte{
	// 1342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xee, 0xda, 0x6e, 0x4b, 0x5e, 0x9a, 0xaf, 0x4d, 0x1a, 0xdc, 0x6d, 0x6a, 0xc2, 0x2a, 0x8a,
	0x42, 0x45, 0xed, 0x24, 0x85, 0xd2, 0x82, 0x84, 0x14, 0x17, 0xa1, 0x06, 0x14, 0xa8, 0x36, 0x69,
	0x91, 0x7a, 0x41, 0xfb, 0x31, 0xb1, 0xb7, 0x75, 0x76, 0xcd, 0xec, 0x6c, 0xe3, 0x88, 0x52, 0x84,
	0x84, 0x84, 0x38, 0x20, 0xf5, 0x48, 0xff, 0x07, 0x12, 0x07, 0xfe, 0x00, 0xc7, 0x1e, 0x39, 0xa2,
	0xe4, 0xde, 0xdf, 0x80, 0x66, 0x76, 0x76, 0xbc, 0x1f, 0x63, 0xef, 0x3a, 0x88, 0x9b, 0xe7, 0x9d,
	0xf7, 0xe3, 0x79, 0x67, 0x9e, 0x99, 0x79, 0xd6, 0xb0, 0xe8, 0x1d, 0x3f, 0x09, 0x5a, 0x16, 0x76,
	0x9d, 0x0e, 0x6a, 0x91, 0x41, 0xb3, 0x8f, 0x7d, 0xe2, 0xab, 0x57, 0xc9, 0x91, 0xdb, 0x73, 0x3b,
	0x5d, 0xd2, 0xc7, 0xfe, 0x63, 0x64, 0x93, 0x26, 0xf5, 0x6a, 0x46, 0x5e, 0xfa, 0x6b, 0x05, 0x16,
	0x77, 0x83, 0xce, 0x5d, 0xdf, 0x3b, 0x70, 0xf1, 0x61, 0x9b, 0xd8, 0x9f, 0xa2, 0xbe, 0x1f, 0xb8,
	0x44, 0x5d, 0x83, 0x19, 0x8c, 0x02, 0x84, 0x9f, 0xa2, 0x6d, 0xc7, 0xc1, 0x28, 0x08, 0xea, 0xca,
	0x8a, 0xb2, 0x3e, 0x65, 0x64, 0xac, 0xea, 0x2a, 0x4c, 0x3b, 0x51, 0xc8, 0xf6, 0xa1, 0x1f, 0x7a,
	0xa4, 0x5e, 0x59, 0x51, 0xd6, 0x6b, 0x46, 0xda, 0xa8, 0x2e, 0xc1, 0x85, 0x2e, 0xa2, 0x18, 0xea,
	0x55, 0x36, 0xcd, 0x47, 0xaa, 0x0a, 0xb5, 0xae, 0x19, 0x74, 0xeb, 0x35, 0x96, 0x9b, 0xfd, 0x56,
	0x6f, 0xc1, 0x52, 0x8c, 0x98, 0x83, 0x89, 0x11, 0x9c, 0x67, 0x5e, 0x23, 0x66, 0x29, 0x12, 0x1f,
	0x9b, 0x76, 0x4f, 0x00, 0xbe, 0xc8, 0xdc, 0xd3, 0x46, 0xfd, 0x21, 0x2c, 0xcb, 0xfa, 0x35, 0x50,
	0xd0, 0xf7, 0xbd, 0x00, 0x8d, 0xa9, 0xae, 0x8c, 0xab, 0xae, 0x3f, 0x67, 0x79, 0x0d, 0xd4, 0x71,
	0x03, 0x82, 0xf0, 0x30, 0x71, 0x8c, 0x6e, 0x0d, 0x66, 0x1c, 0x59, 0xbe, 0x8c, 0x75, 0x4c, 0xfd,
	0xca, 0xd8, 0xfa, 0x6b, 0xb0, 0x3a, 0xae, 0x7e, 0xdc, 0x9f, 0xfe, 0xab, 0x02, 0x57, 0x12, 0x8e,
	0x46, 0x6e, 0x37, 0xf9, 0xfe, 0xee, 0xd9, 0xd8, 0xed, 0x13, 0x0e, 0x32, 0x6d, 0x94, 0x70, 0xa3,
	0x22, 0xe5, 0x86, 0x0e, 0x97, 0x1e, 0x87, 0x4e, 0x47, 0x78, 0x55, 0x99, 0x57, 0xca, 0xa6, 0xbb,
	0xf0, 0xce, 0x48, 0x38, 0x62, 0x53, 0x96, 0x61, 0x8a, 0xa7, 0xde, 0x71, 0x38, 0xa4, 0xa1, 0xa1,
	0x2c, 0x1c, 0xfd, 0x19, 0xcc, 0x25, 0x4a, 0x7d, 0x4e, 0x51, 0xa8, 0x75, 0xb8, 0x68, 0x63, 0x64,
	0x12, 0x1f, 0xf3, 0xbc, 0xf1, 0x30, 0x07, 0xbe, 0x92, 0x07, 0xaf, 0x5e, 0x87, 0xb9, 0xa7, 0x66,
	0xcf, 0x75, 0x68, 0x40, 0xba, 0xc9, 0x9c, 0x5d, 0xd7, 0xa0, 0x9e, 0xad, 0x2e, 0x36, 0xe5, 0x4f,
	0x05, 0x2e, 0xef, 0x06, 0x9d, 0xaf, 0x5d, 0xd2, 0x75, 0xb0, 0x79, 0xd4, 0x26, 0xb6, 0x81, 0xbe,
	0x0d, 0x51, 0x40, 0xd4, 0x75, 0x98, 0x3d, 0xe2, 0xd6, 0x34, 0x6f, 0xb2, 0xe6, 0xd2, 0x9b, 0xb2,
	0x06, 0x33, 0x22, 0x34, 0x3a, 0xb1, 0xd1, 0x91, 0xcc, 0x58, 0x69, 0xe5, 0x98, 0x6a, 0x71, 0xc2,
	0xe8, 0x94, 0x66, 0xcd, 0xfa, 0xdb, 0x70, 0x4d, 0x0a, 0x5e, 0xb4, 0xf7, 0xba, 0xc2, 0x56, 0x7e,
	0xef, 0x08, 0xa1, 0xfe, 0x7d, 0xec, 0xf7, 0xfd, 0xc0, 0xec, 0xe5, 0xf7, 0xb4, 0x96, 0xdc, 0xd3,
	0xf7, 0x60, 0xde, 0x43, 0x47, 0x86, 0xac, 0xa1, 0xfc, 0x44, 0x19, 0xa2, 0xd1, 0xbe, 0xdb, 0xc4,
	0x6e, 0xf7, 0x7c, 0xfb, 0xc9, 0x97, 0xe1, 0xa1, 0x85, 0x30, 0x6b, 0xa7, 0x66, 0x64, 0xac, 0xea,
	0xfb, 0x70, 0xd9, 0xa2, 0x2d, 0xf4, 0xcc, 0xe3, 0xbb, 0x66, 0xdf, 0xb4, 0x5d, 0x72, 0xfc, 0xd0,
	0xec, 0x85, 0x88, 0xdd, 0x3e, 0x35, 0x43, 0x3e, 0x49, 0xbb, 0xb1, 0x88, 0xbd, 0x3f, 0xb8, 0x47,
	0x6f, 0xb3, 0x0b, 0x11, 0x43, 0x85, 0x81, 0xe2, 0x7b, 0xe0, 0xd1, 0x1a, 0xf7, 0xa2, 0x4b, 0xf0,
	0x22, 0x4b, 0x95, 0xb2, 0x51, 0x26, 0x62, 0x3f, 0xf4, 0x9c, 0x1d, 0xa7, 0xfe, 0x06, 0x9b, 0x8e,
	0x87, 0xea, 0x06, 0x2c, 0xc4, 0x7b, 0xb3, 0xe3, 0x20, 0x8f, 0xb8, 0x07, 0x2e, 0xc2, 0x41, 0x7d,
	0x6a, 0xa5, 0xba, 0x3e, 0x65, 0xc8, 0xa6, 0x38, 0xd7, 0x52, 0xeb, 0x2d, 0x36, 0xe3, 0x7b, 0x58,
	0x48, 0xec, 0xd6, 0xfe, 0x60, 0xcf, 0xed, 0x78, 0xc8, 0x19, 0x73, 0x10, 0x64, 0x24, 0xaf, 0xc8,
	0x49, 0xae, 0xae, 0xc0, 0x9b, 0xac, 0xeb, 0x28, 0x29, 0xdf, 0x87, 0xa4, 0x49, 0xbf, 0x06, 0x57,
	0x25, 0xe5, 0x05, 0xba, 0x2e, 0xa8, 0xa9, 0xe9, 0xcf, 0x5c, 0xcf, 0xec, 0xfd, 0xc7, 0x53, 0xba,
	0x08, 0xe7, 0x19, 0x02, 0x0e, 0x27, 0x1a, 0xe8, 0xcb, 0xa0, 0xe5, 0x2b, 0x09, 0x1c, 0x7f, 0x28,
	0x30, 0x4d, 0x97, 0xd0, 0xed, 0x78, 0x06, 0x3a, 0x08, 0x3d, 0xa7, 0xf4, 0x83, 0xb8, 0x0e, 0xb3,
	0x01, 0xed, 0x09, 0xdf, 0x0f, 0xad, 0x9e, 0x6b, 0x7f, 0x81, 0x8e, 0x39, 0xa8, 0xac, 0x99, 0x7a,
	0x62, 0x96, 0x9b, 0x56, 0x31, 0x49, 0x88, 0x11, 0x47, 0x98, 0x35, 0xd3, 0x2d, 0xb0, 0x88, 0xfd,
	0x55, 0xea, 0x75, 0x8b, 0x0e, 0x63, 0xce, 0xae, 0xbf, 0xc5, 0xae, 0x92, 0x21, 0x70, 0xd1, 0xd2,
	0xef, 0x0a, 0x5c, 0xe2, 0x33, 0x8c, 0x19, 0xff, 0x43, 0x47, 0x6b, 0x30, 0x13, 0xd0, 0xd4, 0xc9,
	0x86, 0x28, 0x49, 0x33, 0xd6, 0x89, 0xfa, 0x59, 0x62, 0x02, 0x45, 0xa0, 0x16, 0xed, 0x7c, 0xc3,
	0x78, 0xdc, 0xc6, 0xbe, 0xe9, 0xd8, 0x66, 0x40, 0xf6, 0x07, 0x51, 0x53, 0xab, 0x30, 0xcd, 0x50,
	0x39, 0x6c, 0xb8, 0x3f, 0x88, 0x5f, 0xb0, 0x94, 0xb1, 0x0c, 0x6d, 0x38, 0x53, 0xb3, 0x05, 0x44,
	0x7d, 0x8b, 0xe1, 0x4a, 0x4c, 0x0f, 0x79, 0x12, 0x70, 0x4e, 0xd3, 0xb1, 0x40, 0x90, 0xb1, 0x96,
	0x82, 0xd0, 0x60, 0xa2, 0x22, 0x57, 0x43, 0x60, 0x78, 0xc4, 0x30, 0x44, 0x47, 0x1c, 0x45, 0x73,
	0xec, 0xbe, 0x69, 0x00, 0x60, 0x31, 0xe2, 0xf5, 0x13, 0x96, 0x09, 0x6a, 0xe7, 0x72, 0x8b, 0xda,
	0x3f, 0x30, 0x9e, 0x0d, 0x85, 0x54, 0x7c, 0x92, 0xa8, 0xd6, 0x23, 0x83, 0x44, 0x61, 0x3e, 0x4a,
	0x68, 0xc0, 0x8a, 0x54, 0x03, 0x56, 0x13, 0x1a, 0x30, 0x0b, 0xb0, 0x26, 0x01, 0x18, 0x3d, 0x3b,
	0x79, 0x00, 0x02, 0xe1, 0x33, 0x76, 0x97, 0x3c, 0xf0, 0xa2, 0x85, 0x8f, 0x09, 0xa2, 0x42, 0x8d,
	0x0c, 0x84, 0x8c, 0x60, 0xbf, 0xd5, 0x26, 0xa8, 0x16, 0xb1, 0x63, 0xcf, 0x98, 0x39, 0xd1, 0xaa,
	0x48, 0x66, 0x4a, 0x09, 0x9b, 0xe8, 0x7e, 0xc9, 0x54, 0x17, 0xd8, 0x7e, 0x51, 0x18, 0x7d, 0x87,
	0xd3, 0x9c, 0x3d, 0xe3, 0x5f, 0xc5, 0x0d, 0x58, 0x48, 0xa0, 0x11, 0x04, 0x8b, 0x80, 0xca, 0xa6,
	0x4a, 0x21, 0x8d, 0x88, 0x9e, 0x85, 0x22, 0xa0, 0xfe, 0xa6, 0xc0, 0xd2, 0x90, 0x09, 0xac, 0x8d,
	0xf8, 0x66, 0x68, 0x00, 0x58, 0xc4, 0x4e, 0xdf, 0x1e, 0x09, 0x0b, 0x7f, 0x15, 0xb9, 0x94, 0xac,
	0x88, 0x57, 0x91, 0xcb, 0xc8, 0x54, 0xaf, 0xd5, 0x6c, 0xaf, 0x65, 0x28, 0xb0, 0x02, 0x0d, 0x39,
	0xb2, 0x18, 0xfc, 0xd6, 0xcb, 0x79, 0xa8, 0xee, 0x06, 0x1d, 0xf5, 0x47, 0x05, 0xe6, 0xf3, 0x1f,
	0x39, 0x9b, 0xcd, 0x31, 0xdf, 0x46, 0x4d, 0xd9, 0x77, 0x82, 0x76, 0x67, 0xe2, 0x10, 0xa1, 0x62,
	0x5f, 0x2a, 0x70, 0x65, 0xf4, 0x07, 0x42, 0x61, 0xe2, 0x91, 0xa1, 0xda, 0xf6, 0x99, 0x43, 0x05,
	0xb6, 0x17, 0x0a, 0x2c, 0x8d, 0xf8, 0x26, 0xb8, 0x55, 0x36, 0x7b, 0x3a, 0x4e, 0xfb, 0xe4, 0x6c,
	0x71, 0x02, 0x52, 0x08, 0xd3, 0x69, 0xad, 0x7e, 0xa3, 0x6c, 0x42, 0xe6, 0xae, 0x7d, 0x30, 0x91,
	0xbb, 0x28, 0xfb, 0x93, 0x02, 0xaa, 0x44, 0x88, 0x6f, 0x15, 0x65, 0xcb, 0xc7, 0x68, 0x1f, 0x4d,
	0x1e, 0x93, 0xec, 0x3e, 0xad, 0x97, 0x0b, 0xbb, 0x4f, 0xb9, 0x17, 0x77, 0x2f, 0x55, 0x87, 0xea,
	0x73, 0x98, 0xcb, 0x49, 0xc3, 0x8d, 0xb2, 0x6d, 0xc4, 0x11, 0xda, 0xed, 0x49, 0x23, 0x44, 0xfd,
	0xef, 0x60, 0x36, 0x2b, 0xfe, 0x5a, 0xe5, 0x93, 0xb1, 0x00, 0xed, 0xc3, 0x09, 0x03, 0x44, 0xf1,
	0x1e, 0x40, 0x42, 0xf0, 0x5d, 0x2f, 0x5c, 0x41, 0xe1, 0xab, 0x6d, 0x95, 0xf7, 0x4d, 0x2e, 0x75,
	0x4e, 0xbd, 0x14, 0x2e, 0x75, 0x36, 0xa2, 0x78, 0xa9, 0x47, 0x09, 0x18, 0xd5, 0x85, 0xa9, 0xa1,
	0x16, 0x7c, 0xb7, 0x4c, 0x03, 0x51, 0xc5, 0xcd, 0xd2, 0xae, 0xa2, 0x14, 0xbd, 0x7d, 0xf3, 0x2a,
	0xa5, 0x30, 0x51, 0x2e, 0xa4, 0xf8, 0xf6, 0x1d, 0xa9, 0x57, 0xd8, 0xb9, 0x96, 0xa8, 0x95, 0xad,
	0xf2, 0xf7, 0x79, 0x1c, 0x53, 0x7c, 0xae, 0x47, 0x8b, 0x12, 0x4a, 0xf0, 0xac, 0x22, 0x29, 0x24,
	0x78, 0x26, 0xa0, 0x98, 0xe0, 0x23, 0x54, 0x07, 0xa5, 0x5c, 0x4e, 0x71, 0x6c, 0x94, 0x4f, 0xc6,
	0xc9, 0x7e, 0x7b, 0xd2, 0x88, 0x14, 0x0f, 0xf2, 0x8a, 0x79, 0x73, 0x02, 0x0a, 0x73, 0x08, 0x77,
	0x26, 0x0e, 0x11, 0x18, 0x7e, 0x56, 0x60, 0x41, 0xa6, 0x65, 0x6e, 0x96, 0xa4, 0x56, 0x32, 0x48,
	0xfb, 0xf8, 0x0c, 0x41, 0x31, 0x92, 0xf6, 0xce, 0x5f, 0x27, 0x0d, 0xe5, 0xd5, 0x49, 0x43, 0xf9,
	0xe7, 0xa4, 0xa1, 0xbc, 0x38, 0x6d, 0x9c, 0x7b, 0x75, 0xda, 0x38, 0xf7, 0xf7, 0x69, 0xe3, 0xdc,
	0xa3, 0x56, 0xc7, 0x25, 0xdd, 0xd0, 0x6a, 0xda, 0xfe, 0x61, 0x2b, 0x2e, 0x70, 0x83, 0x57, 0x68,
	0xb1, 0x3f, 0x79, 0x07, 0xe2, 0x6f, 0xde, 0xe3, 0x3e, 0x0a, 0xac, 0x0b, 0xec, 0xaf, 0xde, 0x9b,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x80, 0x04, 0x24, 0x0d, 0x02, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ConfirmBtcDeposit(ctx context.Context, in *MsgConfirmBtcDeposit, opts ...grpc.CallOption) (*MsgConfirmBtcDepositResponse, error)
	RegisterBtcDepositAddress(ctx context.Context, in *MsgRegisterBtcDepositAddress, opts ...grpc.CallOption) (*MsgRegisterBtcDepositAddressResponse, error)
	RegisterReserveAddress(ctx context.Context, in *MsgRegisterReserveAddress, opts ...grpc.CallOption) (*MsgRegisterReserveAddressResponse, error)
	RegisterJudge(ctx context.Context, in *MsgRegisterJudge, opts ...grpc.CallOption) (*MsgRegisterJudgeResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	WithdrawBtcRequest(ctx context.Context, in *MsgWithdrawBtcRequest, opts ...grpc.CallOption) (*MsgWithdrawBtcRequestResponse, error)
	SweepProposal(ctx context.Context, in *MsgSweepProposal, opts ...grpc.CallOption) (*MsgSweepProposalResponse, error)
	WithdrawTxSigned(ctx context.Context, in *MsgWithdrawTxSigned, opts ...grpc.CallOption) (*MsgWithdrawTxSignedResponse, error)
	WithdrawTxFinal(ctx context.Context, in *MsgWithdrawTxFinal, opts ...grpc.CallOption) (*MsgWithdrawTxFinalResponse, error)
	SignRefund(ctx context.Context, in *MsgSignRefund, opts ...grpc.CallOption) (*MsgSignRefundResponse, error)
	BroadcastTxSweep(ctx context.Context, in *MsgBroadcastTxSweep, opts ...grpc.CallOption) (*MsgBroadcastTxSweepResponse, error)
	SignSweep(ctx context.Context, in *MsgSignSweep, opts ...grpc.CallOption) (*MsgSignSweepResponse, error)
	ProposeRefundHash(ctx context.Context, in *MsgProposeRefundHash, opts ...grpc.CallOption) (*MsgProposeRefundHashResponse, error)
	ConfirmBtcWithdraw(ctx context.Context, in *MsgConfirmBtcWithdraw, opts ...grpc.CallOption) (*MsgConfirmBtcWithdrawResponse, error)
	UnsignedTxSweep(ctx context.Context, in *MsgUnsignedTxSweep, opts ...grpc.CallOption) (*MsgUnsignedTxSweepResponse, error)
	UnsignedTxRefund(ctx context.Context, in *MsgUnsignedTxRefund, opts ...grpc.CallOption) (*MsgUnsignedTxRefundResponse, error)
	BroadcastTxRefund(ctx context.Context, in *MsgBroadcastTxRefund, opts ...grpc.CallOption) (*MsgBroadcastTxRefundResponse, error)
	ProposeSweepAddress(ctx context.Context, in *MsgProposeSweepAddress, opts ...grpc.CallOption) (*MsgProposeSweepAddressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConfirmBtcDeposit(ctx context.Context, in *MsgConfirmBtcDeposit, opts ...grpc.CallOption) (*MsgConfirmBtcDepositResponse, error) {
	out := new(MsgConfirmBtcDepositResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/ConfirmBtcDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterBtcDepositAddress(ctx context.Context, in *MsgRegisterBtcDepositAddress, opts ...grpc.CallOption) (*MsgRegisterBtcDepositAddressResponse, error) {
	out := new(MsgRegisterBtcDepositAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/RegisterBtcDepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterReserveAddress(ctx context.Context, in *MsgRegisterReserveAddress, opts ...grpc.CallOption) (*MsgRegisterReserveAddressResponse, error) {
	out := new(MsgRegisterReserveAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/RegisterReserveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterJudge(ctx context.Context, in *MsgRegisterJudge, opts ...grpc.CallOption) (*MsgRegisterJudgeResponse, error) {
	out := new(MsgRegisterJudgeResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/RegisterJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawBtcRequest(ctx context.Context, in *MsgWithdrawBtcRequest, opts ...grpc.CallOption) (*MsgWithdrawBtcRequestResponse, error) {
	out := new(MsgWithdrawBtcRequestResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/WithdrawBtcRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SweepProposal(ctx context.Context, in *MsgSweepProposal, opts ...grpc.CallOption) (*MsgSweepProposalResponse, error) {
	out := new(MsgSweepProposalResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/SweepProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTxSigned(ctx context.Context, in *MsgWithdrawTxSigned, opts ...grpc.CallOption) (*MsgWithdrawTxSignedResponse, error) {
	out := new(MsgWithdrawTxSignedResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/WithdrawTxSigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTxFinal(ctx context.Context, in *MsgWithdrawTxFinal, opts ...grpc.CallOption) (*MsgWithdrawTxFinalResponse, error) {
	out := new(MsgWithdrawTxFinalResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/WithdrawTxFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignRefund(ctx context.Context, in *MsgSignRefund, opts ...grpc.CallOption) (*MsgSignRefundResponse, error) {
	out := new(MsgSignRefundResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/SignRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BroadcastTxSweep(ctx context.Context, in *MsgBroadcastTxSweep, opts ...grpc.CallOption) (*MsgBroadcastTxSweepResponse, error) {
	out := new(MsgBroadcastTxSweepResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/BroadcastTxSweep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignSweep(ctx context.Context, in *MsgSignSweep, opts ...grpc.CallOption) (*MsgSignSweepResponse, error) {
	out := new(MsgSignSweepResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/SignSweep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeRefundHash(ctx context.Context, in *MsgProposeRefundHash, opts ...grpc.CallOption) (*MsgProposeRefundHashResponse, error) {
	out := new(MsgProposeRefundHashResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/ProposeRefundHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBtcWithdraw(ctx context.Context, in *MsgConfirmBtcWithdraw, opts ...grpc.CallOption) (*MsgConfirmBtcWithdrawResponse, error) {
	out := new(MsgConfirmBtcWithdrawResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/ConfirmBtcWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnsignedTxSweep(ctx context.Context, in *MsgUnsignedTxSweep, opts ...grpc.CallOption) (*MsgUnsignedTxSweepResponse, error) {
	out := new(MsgUnsignedTxSweepResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/UnsignedTxSweep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnsignedTxRefund(ctx context.Context, in *MsgUnsignedTxRefund, opts ...grpc.CallOption) (*MsgUnsignedTxRefundResponse, error) {
	out := new(MsgUnsignedTxRefundResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/UnsignedTxRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BroadcastTxRefund(ctx context.Context, in *MsgBroadcastTxRefund, opts ...grpc.CallOption) (*MsgBroadcastTxRefundResponse, error) {
	out := new(MsgBroadcastTxRefundResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/BroadcastTxRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeSweepAddress(ctx context.Context, in *MsgProposeSweepAddress, opts ...grpc.CallOption) (*MsgProposeSweepAddressResponse, error) {
	out := new(MsgProposeSweepAddressResponse)
	err := c.cc.Invoke(ctx, "/twilightproject.nyks.bridge.Msg/ProposeSweepAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ConfirmBtcDeposit(context.Context, *MsgConfirmBtcDeposit) (*MsgConfirmBtcDepositResponse, error)
	RegisterBtcDepositAddress(context.Context, *MsgRegisterBtcDepositAddress) (*MsgRegisterBtcDepositAddressResponse, error)
	RegisterReserveAddress(context.Context, *MsgRegisterReserveAddress) (*MsgRegisterReserveAddressResponse, error)
	RegisterJudge(context.Context, *MsgRegisterJudge) (*MsgRegisterJudgeResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	WithdrawBtcRequest(context.Context, *MsgWithdrawBtcRequest) (*MsgWithdrawBtcRequestResponse, error)
	SweepProposal(context.Context, *MsgSweepProposal) (*MsgSweepProposalResponse, error)
	WithdrawTxSigned(context.Context, *MsgWithdrawTxSigned) (*MsgWithdrawTxSignedResponse, error)
	WithdrawTxFinal(context.Context, *MsgWithdrawTxFinal) (*MsgWithdrawTxFinalResponse, error)
	SignRefund(context.Context, *MsgSignRefund) (*MsgSignRefundResponse, error)
	BroadcastTxSweep(context.Context, *MsgBroadcastTxSweep) (*MsgBroadcastTxSweepResponse, error)
	SignSweep(context.Context, *MsgSignSweep) (*MsgSignSweepResponse, error)
	ProposeRefundHash(context.Context, *MsgProposeRefundHash) (*MsgProposeRefundHashResponse, error)
	ConfirmBtcWithdraw(context.Context, *MsgConfirmBtcWithdraw) (*MsgConfirmBtcWithdrawResponse, error)
	UnsignedTxSweep(context.Context, *MsgUnsignedTxSweep) (*MsgUnsignedTxSweepResponse, error)
	UnsignedTxRefund(context.Context, *MsgUnsignedTxRefund) (*MsgUnsignedTxRefundResponse, error)
	BroadcastTxRefund(context.Context, *MsgBroadcastTxRefund) (*MsgBroadcastTxRefundResponse, error)
	ProposeSweepAddress(context.Context, *MsgProposeSweepAddress) (*MsgProposeSweepAddressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConfirmBtcDeposit(ctx context.Context, req *MsgConfirmBtcDeposit) (*MsgConfirmBtcDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBtcDeposit not implemented")
}
func (*UnimplementedMsgServer) RegisterBtcDepositAddress(ctx context.Context, req *MsgRegisterBtcDepositAddress) (*MsgRegisterBtcDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBtcDepositAddress not implemented")
}
func (*UnimplementedMsgServer) RegisterReserveAddress(ctx context.Context, req *MsgRegisterReserveAddress) (*MsgRegisterReserveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReserveAddress not implemented")
}
func (*UnimplementedMsgServer) RegisterJudge(ctx context.Context, req *MsgRegisterJudge) (*MsgRegisterJudgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJudge not implemented")
}
func (*UnimplementedMsgServer) WithdrawBtcRequest(ctx context.Context, req *MsgWithdrawBtcRequest) (*MsgWithdrawBtcRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBtcRequest not implemented")
}
func (*UnimplementedMsgServer) SweepProposal(ctx context.Context, req *MsgSweepProposal) (*MsgSweepProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SweepProposal not implemented")
}
func (*UnimplementedMsgServer) WithdrawTxSigned(ctx context.Context, req *MsgWithdrawTxSigned) (*MsgWithdrawTxSignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTxSigned not implemented")
}
func (*UnimplementedMsgServer) WithdrawTxFinal(ctx context.Context, req *MsgWithdrawTxFinal) (*MsgWithdrawTxFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTxFinal not implemented")
}
func (*UnimplementedMsgServer) SignRefund(ctx context.Context, req *MsgSignRefund) (*MsgSignRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRefund not implemented")
}
func (*UnimplementedMsgServer) BroadcastTxSweep(ctx context.Context, req *MsgBroadcastTxSweep) (*MsgBroadcastTxSweepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTxSweep not implemented")
}
func (*UnimplementedMsgServer) SignSweep(ctx context.Context, req *MsgSignSweep) (*MsgSignSweepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignSweep not implemented")
}
func (*UnimplementedMsgServer) ProposeRefundHash(ctx context.Context, req *MsgProposeRefundHash) (*MsgProposeRefundHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeRefundHash not implemented")
}
func (*UnimplementedMsgServer) ConfirmBtcWithdraw(ctx context.Context, req *MsgConfirmBtcWithdraw) (*MsgConfirmBtcWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBtcWithdraw not implemented")
}
func (*UnimplementedMsgServer) UnsignedTxSweep(ctx context.Context, req *MsgUnsignedTxSweep) (*MsgUnsignedTxSweepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsignedTxSweep not implemented")
}
func (*UnimplementedMsgServer) UnsignedTxRefund(ctx context.Context, req *MsgUnsignedTxRefund) (*MsgUnsignedTxRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsignedTxRefund not implemented")
}
func (*UnimplementedMsgServer) BroadcastTxRefund(ctx context.Context, req *MsgBroadcastTxRefund) (*MsgBroadcastTxRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTxRefund not implemented")
}
func (*UnimplementedMsgServer) ProposeSweepAddress(ctx context.Context, req *MsgProposeSweepAddress) (*MsgProposeSweepAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSweepAddress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConfirmBtcDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBtcDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBtcDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/ConfirmBtcDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBtcDeposit(ctx, req.(*MsgConfirmBtcDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterBtcDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterBtcDepositAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterBtcDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/RegisterBtcDepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterBtcDepositAddress(ctx, req.(*MsgRegisterBtcDepositAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterReserveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterReserveAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterReserveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/RegisterReserveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterReserveAddress(ctx, req.(*MsgRegisterReserveAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterJudge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/RegisterJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterJudge(ctx, req.(*MsgRegisterJudge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawBtcRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawBtcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawBtcRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/WithdrawBtcRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawBtcRequest(ctx, req.(*MsgWithdrawBtcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SweepProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSweepProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SweepProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/SweepProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SweepProposal(ctx, req.(*MsgSweepProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTxSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTxSigned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTxSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/WithdrawTxSigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTxSigned(ctx, req.(*MsgWithdrawTxSigned))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTxFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTxFinal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTxFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/WithdrawTxFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTxFinal(ctx, req.(*MsgWithdrawTxFinal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignRefund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/SignRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignRefund(ctx, req.(*MsgSignRefund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BroadcastTxSweep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBroadcastTxSweep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BroadcastTxSweep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/BroadcastTxSweep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BroadcastTxSweep(ctx, req.(*MsgBroadcastTxSweep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignSweep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignSweep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignSweep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/SignSweep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignSweep(ctx, req.(*MsgSignSweep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeRefundHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeRefundHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeRefundHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/ProposeRefundHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeRefundHash(ctx, req.(*MsgProposeRefundHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBtcWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBtcWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBtcWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/ConfirmBtcWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBtcWithdraw(ctx, req.(*MsgConfirmBtcWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnsignedTxSweep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnsignedTxSweep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnsignedTxSweep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/UnsignedTxSweep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnsignedTxSweep(ctx, req.(*MsgUnsignedTxSweep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnsignedTxRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnsignedTxRefund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnsignedTxRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/UnsignedTxRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnsignedTxRefund(ctx, req.(*MsgUnsignedTxRefund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BroadcastTxRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBroadcastTxRefund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BroadcastTxRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/BroadcastTxRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BroadcastTxRefund(ctx, req.(*MsgBroadcastTxRefund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeSweepAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeSweepAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeSweepAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twilightproject.nyks.bridge.Msg/ProposeSweepAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeSweepAddress(ctx, req.(*MsgProposeSweepAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twilightproject.nyks.bridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmBtcDeposit",
			Handler:    _Msg_ConfirmBtcDeposit_Handler,
		},
		{
			MethodName: "RegisterBtcDepositAddress",
			Handler:    _Msg_RegisterBtcDepositAddress_Handler,
		},
		{
			MethodName: "RegisterReserveAddress",
			Handler:    _Msg_RegisterReserveAddress_Handler,
		},
		{
			MethodName: "RegisterJudge",
			Handler:    _Msg_RegisterJudge_Handler,
		},
		{
			MethodName: "WithdrawBtcRequest",
			Handler:    _Msg_WithdrawBtcRequest_Handler,
		},
		{
			MethodName: "SweepProposal",
			Handler:    _Msg_SweepProposal_Handler,
		},
		{
			MethodName: "WithdrawTxSigned",
			Handler:    _Msg_WithdrawTxSigned_Handler,
		},
		{
			MethodName: "WithdrawTxFinal",
			Handler:    _Msg_WithdrawTxFinal_Handler,
		},
		{
			MethodName: "SignRefund",
			Handler:    _Msg_SignRefund_Handler,
		},
		{
			MethodName: "BroadcastTxSweep",
			Handler:    _Msg_BroadcastTxSweep_Handler,
		},
		{
			MethodName: "SignSweep",
			Handler:    _Msg_SignSweep_Handler,
		},
		{
			MethodName: "ProposeRefundHash",
			Handler:    _Msg_ProposeRefundHash_Handler,
		},
		{
			MethodName: "ConfirmBtcWithdraw",
			Handler:    _Msg_ConfirmBtcWithdraw_Handler,
		},
		{
			MethodName: "UnsignedTxSweep",
			Handler:    _Msg_UnsignedTxSweep_Handler,
		},
		{
			MethodName: "UnsignedTxRefund",
			Handler:    _Msg_UnsignedTxRefund_Handler,
		},
		{
			MethodName: "BroadcastTxRefund",
			Handler:    _Msg_BroadcastTxRefund_Handler,
		},
		{
			MethodName: "ProposeSweepAddress",
			Handler:    _Msg_ProposeSweepAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nyks/bridge/tx.proto",
}

func (m *MsgConfirmBtcDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.DepositAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBtcDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBtcDepositAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBtcDepositAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBtcDepositAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBtcDepositAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBtcDepositAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBtcDepositAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterReserveAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterReserveAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterReserveAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReserveScript) > 0 {
		i -= len(m.ReserveScript)
		copy(dAtA[i:], m.ReserveScript)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveScript)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterReserveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterReserveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterReserveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReserveId) > 0 {
		i -= len(m.ReserveId)
		copy(dAtA[i:], m.ReserveId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterJudge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterJudge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterJudge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterJudgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterJudgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterJudgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawBtcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawBtcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawBtcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TwilightAddress) > 0 {
		i -= len(m.TwilightAddress)
		copy(dAtA[i:], m.TwilightAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TwilightAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.WithdrawAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WithdrawAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawBtcRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawBtcRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawBtcRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSweepProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSweepProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSweepProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawIdentifiers) > 0 {
		for iNdEx := len(m.WithdrawIdentifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawIdentifiers[iNdEx])
			copy(dAtA[i:], m.WithdrawIdentifiers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawIdentifiers[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x40
	}
	if m.UnlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BtcTxHash) > 0 {
		i -= len(m.BtcTxHash)
		copy(dAtA[i:], m.BtcTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BtcRelayCapacityValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcRelayCapacityValue))
		i--
		dAtA[i] = 0x28
	}
	if m.BtcBlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcBlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewReserveAddress) > 0 {
		i -= len(m.NewReserveAddress)
		copy(dAtA[i:], m.NewReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReserveId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSweepProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSweepProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSweepProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcTxSigned) > 0 {
		i -= len(m.BtcTxSigned)
		copy(dAtA[i:], m.BtcTxSigned)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcTxSigned)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxSignedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxSignedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxSignedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxFinal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxFinal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxFinal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcTx) > 0 {
		i -= len(m.BtcTx)
		copy(dAtA[i:], m.BtcTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcTx)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTxFinalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTxFinalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTxFinalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcOracleAddress) > 0 {
		i -= len(m.BtcOracleAddress)
		copy(dAtA[i:], m.BtcOracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcOracleAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RefundSignature) > 0 {
		i -= len(m.RefundSignature)
		copy(dAtA[i:], m.RefundSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SignerPublicKey) > 0 {
		i -= len(m.SignerPublicKey)
		copy(dAtA[i:], m.SignerPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignerPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignSweep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignSweep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignSweep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcOracleAddress) > 0 {
		i -= len(m.BtcOracleAddress)
		copy(dAtA[i:], m.BtcOracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcOracleAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SweepSignature) > 0 {
		for iNdEx := len(m.SweepSignature) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SweepSignature[iNdEx])
			copy(dAtA[i:], m.SweepSignature[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SweepSignature[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SignerPublicKey) > 0 {
		i -= len(m.SignerPublicKey)
		copy(dAtA[i:], m.SignerPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignerPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignSweepResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignSweepResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignSweepResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBroadcastTxSweep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBroadcastTxSweep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBroadcastTxSweep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedSweepTx) > 0 {
		i -= len(m.SignedSweepTx)
		copy(dAtA[i:], m.SignedSweepTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignedSweepTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBroadcastTxSweepResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBroadcastTxSweepResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBroadcastTxSweepResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBroadcastTxRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBroadcastTxRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBroadcastTxRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedRefundTx) > 0 {
		i -= len(m.SignedRefundTx)
		copy(dAtA[i:], m.SignedRefundTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignedRefundTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBroadcastTxRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBroadcastTxRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBroadcastTxRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProposeRefundHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeRefundHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeRefundHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RefundHash) > 0 {
		i -= len(m.RefundHash)
		copy(dAtA[i:], m.RefundHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeRefundHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeRefundHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeRefundHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBtcWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBtcWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBtcWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBtcWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnsignedTxSweep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnsignedTxSweep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnsignedTxSweep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtcUnsignedSweepTx) > 0 {
		i -= len(m.BtcUnsignedSweepTx)
		copy(dAtA[i:], m.BtcUnsignedSweepTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcUnsignedSweepTx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnsignedTxSweepResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnsignedTxSweepResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnsignedTxSweepResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnsignedTxRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnsignedTxRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnsignedTxRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtcUnsignedRefundTx) > 0 {
		i -= len(m.BtcUnsignedRefundTx)
		copy(dAtA[i:], m.BtcUnsignedRefundTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcUnsignedRefundTx)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReserveId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnsignedTxRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnsignedTxRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnsignedTxRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProposeSweepAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeSweepAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeSweepAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JudgeAddress) > 0 {
		i -= len(m.JudgeAddress)
		copy(dAtA[i:], m.JudgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JudgeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReserveId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BtcScript) > 0 {
		i -= len(m.BtcScript)
		copy(dAtA[i:], m.BtcScript)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcScript)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcAddress) > 0 {
		i -= len(m.BtcAddress)
		copy(dAtA[i:], m.BtcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeSweepAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeSweepAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeSweepAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConfirmBtcDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DepositAmount != 0 {
		n += 1 + sovTx(uint64(m.DepositAmount))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmBtcDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBtcDepositAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBtcDepositAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterReserveAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveScript)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterReserveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterJudge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterJudgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawBtcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WithdrawAmount != 0 {
		n += 1 + sovTx(uint64(m.WithdrawAmount))
	}
	l = len(m.TwilightAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawBtcRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSweepProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovTx(uint64(m.ReserveId))
	}
	l = len(m.NewReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BtcBlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BtcBlockNumber))
	}
	if m.BtcRelayCapacityValue != 0 {
		n += 1 + sovTx(uint64(m.BtcRelayCapacityValue))
	}
	l = len(m.BtcTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnlockHeight != 0 {
		n += 1 + sovTx(uint64(m.UnlockHeight))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	if len(m.WithdrawIdentifiers) > 0 {
		for _, s := range m.WithdrawIdentifiers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSweepProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawTxSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcTxSigned)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTxSignedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawTxFinal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTxFinalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SignerPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefundSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcOracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignSweep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SignerPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SweepSignature) > 0 {
		for _, s := range m.SweepSignature {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BtcOracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignSweepResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBroadcastTxSweep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedSweepTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBroadcastTxSweepResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBroadcastTxRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedRefundTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBroadcastTxRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProposeRefundHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefundHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeRefundHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmBtcWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmBtcWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnsignedTxSweep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcUnsignedSweepTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnsignedTxSweepResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnsignedTxRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovTx(uint64(m.ReserveId))
	}
	l = len(m.BtcUnsignedRefundTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnsignedTxRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProposeSweepAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BtcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcScript)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReserveId != 0 {
		n += 1 + sovTx(uint64(m.ReserveId))
	}
	l = len(m.JudgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeSweepAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConfirmBtcDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBtcDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBtcDepositAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBtcDepositAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBtcDepositAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterReserveAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterReserveAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterReserveAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterReserveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterReserveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterReserveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterJudge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterJudge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterJudge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterJudgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterJudgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterJudgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawBtcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawBtcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawBtcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			m.WithdrawAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawBtcRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawBtcRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawBtcRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSweepProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSweepProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSweepProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcBlockNumber", wireType)
			}
			m.BtcBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcRelayCapacityValue", wireType)
			}
			m.BtcRelayCapacityValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcRelayCapacityValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockHeight", wireType)
			}
			m.UnlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawIdentifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawIdentifiers = append(m.WithdrawIdentifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSweepProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSweepProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSweepProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTxSigned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcTxSigned = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxSignedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxSignedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxSignedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxFinal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxFinal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxFinal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTxFinalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTxFinalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTxFinalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcOracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcOracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignSweep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignSweep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignSweep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SweepSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SweepSignature = append(m.SweepSignature, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcOracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcOracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignSweepResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignSweepResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignSweepResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBroadcastTxSweep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBroadcastTxSweep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBroadcastTxSweep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedSweepTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedSweepTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBroadcastTxSweepResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBroadcastTxSweepResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBroadcastTxSweepResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBroadcastTxRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBroadcastTxRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBroadcastTxRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedRefundTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedRefundTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBroadcastTxRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBroadcastTxRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBroadcastTxRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeRefundHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeRefundHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeRefundHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeRefundHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeRefundHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeRefundHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBtcWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBtcWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBtcWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnsignedTxSweep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnsignedTxSweep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnsignedTxSweep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcUnsignedSweepTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcUnsignedSweepTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnsignedTxSweepResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnsignedTxSweepResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnsignedTxSweepResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnsignedTxRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnsignedTxRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnsignedTxRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcUnsignedRefundTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcUnsignedRefundTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnsignedTxRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnsignedTxRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnsignedTxRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeSweepAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeSweepAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeSweepAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeSweepAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeSweepAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeSweepAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
