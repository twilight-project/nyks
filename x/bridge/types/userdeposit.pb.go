// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nyks/bridge/userdeposit.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserDeposit struct {
	DepositAddress         string `protobuf:"bytes,1,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	TwilightDepositAddress string `protobuf:"bytes,2,opt,name=twilightDepositAddress,proto3" json:"twilightDepositAddress,omitempty"`
	DepositAmount          uint64 `protobuf:"varint,3,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`
	BlockHeight            int64  `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	IsConfirmed            bool   `protobuf:"varint,5,opt,name=isConfirmed,proto3" json:"isConfirmed,omitempty"`
	IsProcessed            bool   `protobuf:"varint,6,opt,name=IsProcessed,proto3" json:"IsProcessed,omitempty"`
}

func (m *UserDeposit) Reset()         { *m = UserDeposit{} }
func (m *UserDeposit) String() string { return proto.CompactTextString(m) }
func (*UserDeposit) ProtoMessage()    {}
func (*UserDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_c136d389e6eacfd5, []int{0}
}
func (m *UserDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeposit.Merge(m, src)
}
func (m *UserDeposit) XXX_Size() int {
	return m.Size()
}
func (m *UserDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeposit proto.InternalMessageInfo

func (m *UserDeposit) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *UserDeposit) GetTwilightDepositAddress() string {
	if m != nil {
		return m.TwilightDepositAddress
	}
	return ""
}

func (m *UserDeposit) GetDepositAmount() uint64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *UserDeposit) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *UserDeposit) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

func (m *UserDeposit) GetIsProcessed() bool {
	if m != nil {
		return m.IsProcessed
	}
	return false
}

func init() {
	proto.RegisterType((*UserDeposit)(nil), "twilightproject.nyks.bridge.UserDeposit")
}

func init() { proto.RegisterFile("nyks/bridge/userdeposit.proto", fileDescriptor_c136d389e6eacfd5) }

var fileDescriptor_c136d389e6eacfd5 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x18, 0x86, 0x73, 0xb6, 0x16, 0xbd, 0xa2, 0x43, 0x06, 0x39, 0x10, 0x8f, 0x43, 0x44, 0xb2, 0x98,
	0x1b, 0x04, 0x77, 0xb5, 0x83, 0xdd, 0x24, 0xe0, 0xe2, 0x98, 0xdc, 0x67, 0x7a, 0xb6, 0xc9, 0x85,
	0xfb, 0x2e, 0x68, 0xff, 0x85, 0x3f, 0xcb, 0xb1, 0xa3, 0xa3, 0x24, 0xbf, 0xc2, 0x4d, 0x92, 0x34,
	0x90, 0x0a, 0xae, 0xcf, 0x3d, 0xdf, 0x0b, 0xf7, 0xd0, 0xb3, 0x7c, 0xbd, 0x44, 0x19, 0x5b, 0xad,
	0x52, 0x90, 0x25, 0x82, 0x55, 0x50, 0x18, 0xd4, 0x2e, 0x2c, 0xac, 0x71, 0xc6, 0x3f, 0x75, 0x6f,
	0x7a, 0xa5, 0xd3, 0x85, 0x2b, 0xac, 0x79, 0x85, 0xc4, 0x85, 0x8d, 0x1e, 0x76, 0xfa, 0xf9, 0x0f,
	0xa1, 0xd3, 0x27, 0x04, 0x3b, 0xeb, 0x4e, 0xfc, 0x4b, 0x7a, 0xbc, 0xbd, 0xbe, 0x55, 0xca, 0x02,
	0x22, 0x23, 0x82, 0x04, 0x87, 0xd1, 0x1f, 0xea, 0xdf, 0xd0, 0x93, 0x7e, 0x76, 0xb6, 0xeb, 0xef,
	0xb5, 0xfe, 0x3f, 0xaf, 0xfe, 0x05, 0x3d, 0xea, 0x97, 0x32, 0x53, 0xe6, 0x8e, 0x8d, 0x04, 0x09,
	0xc6, 0xd1, 0x2e, 0xf4, 0x05, 0x9d, 0xc6, 0x2b, 0x93, 0x2c, 0x1f, 0xa0, 0x99, 0x60, 0x63, 0x41,
	0x82, 0x51, 0x34, 0x44, 0x8d, 0xa1, 0xf1, 0xde, 0xe4, 0x2f, 0xda, 0x66, 0xa0, 0xd8, 0xbe, 0x20,
	0xc1, 0x41, 0x34, 0x44, 0x8d, 0x31, 0xc7, 0x47, 0x6b, 0x12, 0x40, 0x04, 0xc5, 0x26, 0x9d, 0x31,
	0x40, 0x77, 0xf3, 0xcf, 0x8a, 0x93, 0x4d, 0xc5, 0xc9, 0x77, 0xc5, 0xc9, 0x47, 0xcd, 0xbd, 0x4d,
	0xcd, 0xbd, 0xaf, 0x9a, 0x7b, 0xcf, 0x32, 0xd5, 0x6e, 0x51, 0xc6, 0x61, 0x62, 0x32, 0xd9, 0x7f,
	0xe4, 0x6a, 0x9b, 0x4f, 0xb6, 0xb5, 0xdf, 0xfb, 0xde, 0x6e, 0x5d, 0x00, 0xc6, 0x93, 0x36, 0xf5,
	0xf5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x81, 0x13, 0x45, 0x8b, 0x01, 0x00, 0x00,
}

func (m *UserDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsProcessed {
		i--
		if m.IsProcessed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsConfirmed {
		i--
		if m.IsConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintUserdeposit(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.DepositAmount != 0 {
		i = encodeVarintUserdeposit(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TwilightDepositAddress) > 0 {
		i -= len(m.TwilightDepositAddress)
		copy(dAtA[i:], m.TwilightDepositAddress)
		i = encodeVarintUserdeposit(dAtA, i, uint64(len(m.TwilightDepositAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintUserdeposit(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserdeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserdeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovUserdeposit(uint64(l))
	}
	l = len(m.TwilightDepositAddress)
	if l > 0 {
		n += 1 + l + sovUserdeposit(uint64(l))
	}
	if m.DepositAmount != 0 {
		n += 1 + sovUserdeposit(uint64(m.DepositAmount))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovUserdeposit(uint64(m.BlockHeight))
	}
	if m.IsConfirmed {
		n += 2
	}
	if m.IsProcessed {
		n += 2
	}
	return n
}

func sovUserdeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserdeposit(x uint64) (n int) {
	return sovUserdeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserdeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserdeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserdeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwilightDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserdeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserdeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwilightDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConfirmed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProcessed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProcessed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserdeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserdeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserdeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserdeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserdeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserdeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserdeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserdeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserdeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserdeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserdeposit = fmt.Errorf("proto: unexpected end of group")
)
